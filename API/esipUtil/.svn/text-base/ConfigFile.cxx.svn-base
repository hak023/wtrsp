
#include <sys/stat.h>
#include <sys/time.h>
#include <time.h>
#include <utime.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>

#include "ConfigFile.hxx"
#include "Directory.hxx"
#include "log.hxx"
#include "timerTable.hxx"
#include "fileControl.hxx"

namespace eSipUtil
{
char g_szDefaultCfg[] =
"[main]\n";
/*   Sample Defaul Config
DefaultCfgItem_t DefaultCfg[]=
{
	{"main","log","1"},
	{"main","dellog_maxfile","0"},
	{"tgas","rsp_delay","on"},
	{"tgas","rsp_delay_add","1000"},
	{"tgas","rsp_delay_mod","1000"},
	{"tgas","rsp_delay_del","1000"},
	{"tgas","add_reason","0"},
	{"tgas","mod_reason","0"},
	{"tgas","sdp_reason","0"},
	{"tgas","del_reason","0"},
	{"tgas","add_skip","off"},
	{"tgas","mod_skip","off"},
	{"tgas","sdp_skip","off"},
	{"tgas","del_skip","off"},
	{"pde","error_reason","327680"},
	{"pde","start_skip","off"},
	{"pde","interim_skip","off"},
	{"pde","stop_skip","off"},
	{NULL,NULL,NULL}
};
*/
/*************************** File Time Info Class *******************************************/
static unsigned int s_arrCrc32[] = 
{
	0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
	0xe963a535, 0x9e6495a3,	0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
	0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
	0xf3b97148, 0x84be41de,	0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
	0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec,	0x14015c4f, 0x63066cd9,
	0xfa0f3d63, 0x8d080df5,	0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
	0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,	0x35b5a8fa, 0x42b2986c,
	0xdbbbc9d6, 0xacbcf940,	0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
	0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
	0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
	0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,	0x76dc4190, 0x01db7106,
	0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
	0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
	0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
	0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
	0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
	0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
	0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
	0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
	0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
	0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
	0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
	0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
	0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
	0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
	0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
	0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
	0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
	0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
	0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
	0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
	0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
	0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
	0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
	0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
	0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
	0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
	0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
	0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
	0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
	0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
	0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
	0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};
static int s_fnStrStr2(char *_pszSrc,char *_pszKey)
{
	if(_pszSrc==NULL || _pszKey==NULL) return -1;
	if(_pszSrc[0]==0 || _pszKey[0]==0) return -1;
	char *cp = (char *) _pszSrc;char *s1, *s2;
	int idx = 0;
	while (*cp)
	{
		s1 = cp;s2 = (char *) _pszKey;
		while (*s1 && *s2 && !(*s1 - *s2)) s1++, s2++;
		if (!*s2) return idx;
		cp++;idx++;
	}
	return -1;
}
CfgFileInfo::CfgFileInfo(){m_pszRawData= NULL;m_fnClear();m_bEnhanced=false;}
CfgFileInfo::~CfgFileInfo(){if(m_pszRawData){delete [] m_pszRawData;}}
void CfgFileInfo::m_fnInit(const char * _pszPath)
{
	m_clsPath = _pszPath; 
	CfgFile::m_fnCreateDirExeptFile((KCSTR)m_clsPath); 
	chmod((KCSTR)m_clsPath,0755);
	m_fnUpdateTime();
	if(S_ISDIR(m_stFileInfo.st_mode)) m_bIsDir = true;
	m_fnUpdateCRC();
}
bool CfgFileInfo::m_fnUpdateTime()
{
	memset(&m_stFileInfo,0x00,sizeof(struct stat));stat((KCSTR)m_clsPath,&m_stFileInfo);
	m_unPrevModiTime = m_unCurrentModiTime; m_unCurrentModiTime = (unsigned int)m_stFileInfo.st_mtime;
	m_unPrevSize = m_unCurrentSize; m_unCurrentSize = (unsigned int)(m_stFileInfo.st_size);
	if(m_unPrevModiTime != m_unCurrentModiTime)
	{
		memset(&m_stTm,0x00,sizeof(tm));localtime_r(&m_stFileInfo.st_mtime,&m_stTm);	
		m_nYr = m_stTm.tm_year + 1900;
		m_nMon = m_stTm.tm_mon +1;
		//m_nWk = m_stTm.tm_wday + 1;
		m_nDay = m_stTm.tm_mday;
		m_nHr = m_stTm.tm_hour;
		m_nMin = m_stTm.tm_min;
		m_nSec = m_stTm.tm_sec;
		memset(m_szTime,0x00,20);
		sprintf(m_szTime,"%04d-%02d-%02d-%02d-%02d-%02d",
												m_nYr,m_nMon,m_nDay,m_nHr,m_nMin,m_nSec);
		return true;
	}
	if(m_unPrevSize != m_unCurrentSize) return true;
	return false;
}
bool CfgFileInfo::m_fnUpdateCRC()
#if 1
{
	if(m_bIsDir) return false;
	FILE *fp = NULL;
	if ((fp = fopen((KSTR)m_clsPath, "r")) == NULL) 
	{
		LogInternal(E_LOG_ERR,"[%s] File Open Failed.",(KCSTR)m_clsPath);
		m_unReadSz=0;
		if(m_pszRawData)
		{
			delete [] m_pszRawData; m_pszRawData=NULL;
		}
		return false;
	}
	unsigned int unRealSz = m_fnGetFileSize();
	if(unRealSz==0)
	{
		LogInternal(E_LOG_ERR,"[%s] Illegal Real Size : %u",(KCSTR)m_clsPath,unRealSz);
	}
	if(m_pszRawData)
	{
		delete [] m_pszRawData; m_pszRawData=NULL;
	}
	m_pszRawData = new char[unRealSz+10]; memset(m_pszRawData,0x00,unRealSz+10);
	if(unRealSz > 0)
	{
		m_unReadSz=fread(m_pszRawData,1,unRealSz,fp);
	}
	else m_unReadSz = 0;
	fclose(fp);
	if(m_unReadSz == 0)
	{
		LogInternal(E_LOG_ERR,"[%s] fread size is Zero",(KCSTR)m_clsPath);
	}
	else if(unRealSz != (unsigned int)m_unReadSz)
	{
		LogInternal(E_LOG_ERR,"[%s] MisMatch Read Size, [Real:%u][Read:%u]",
															(KCSTR)m_clsPath, unRealSz,m_unReadSz);
		if(m_pszRawData)
		{
			delete [] m_pszRawData; m_pszRawData=NULL;
		}
		m_unReadSz = 0;return false;
	}
	//LogInternal(E_LOG_DEBUG,"[%s] Read File Size  = %u",(KCSTR)m_clsPath,m_unReadSz);
	m_unPrevCrc = m_ulCurrentCrc;
	unsigned int unCrc = 0; m_ulCurrentCrc = m_fnGetCRC(unCrc,m_pszRawData,m_unReadSz);
	if(m_unPrevCrc != m_ulCurrentCrc)return true;
	return false;
}
#else
{
	int nFd = -1; 	ssize_t  lReadLen = 0; off_t lFileSize = 0; char * pszFileData = NULL;
	char szFileLen[128];char szReadLen[128];unsigned int unCrc=0;
	nFd = open((KSTR)m_clsPath, O_RDONLY);
	if( nFd < 0 )
	{
		LogInternal(E_LOG_ERR, "CfgFileInfo[%s] : ReadFile : fail : can't open file",  (KSTR)m_clsPath);
		goto FAIL_READ;		
	}
	lFileSize = lseek(nFd, 0, SEEK_END);
	lseek(nFd, 0, SEEK_SET);
	if( lFileSize == 0 )
	{
		LogInternal(E_LOG_ERR, "CfgFileInfo[%s] : ReadFile : fail : empty file", (KSTR)m_clsPath);
		goto FAIL_READ;
	}
	//read file
	m_pszRawData = (char *)malloc(lFileSize+1);
	if( !m_pszRawData )
	{
		LogInternal(E_LOG_ERR,  "CfgFileInfo[%s] : ReadFile : fail : can't create Buffer ", (KSTR)m_clsPath);
		goto  FAIL_READ;
	}
	memset(m_pszRawData, 0x00, lFileSize+1);
	lReadLen = read(nFd, m_pszRawData, lFileSize);
	if( lReadLen != lFileSize )
	{
		LogInternal(E_LOG_ERR, "CfgFileInfo[%s] : ReadFile : fail : readLen is unmatch :  FileLen[%ld] != ReadLen[%ld]", 
												(KSTR)m_clsPath, lFileSize, lReadLen);
		goto  FAIL_READ;
	}
	close(nFd);
	memset(szFileLen,0x00,128);KString::m_fnStrnCat(szFileLen,128,"%lu",lFileSize);
	memset(szReadLen,0x00,128);KString::m_fnStrnCat(szReadLen,128,"%lu",lFileSize);
	m_unReadSz = KString::m_fnAtoi(szReadLen);
	LogInternal(E_LOG_INFO, "CfgFileInfo[%s] : ReadFile : succ : ReadLen[%ld]",(KSTR)m_clsPath, lReadLen);
	LogInternal(E_LOG_DEBUG, "\n%s", pszFileData);

	m_unPrevCrc = m_ulCurrentCrc;
	unCrc = 0; m_ulCurrentCrc = m_fnGetCRC(unCrc,m_pszRawData,m_unReadSz);
	if(m_unPrevCrc != m_ulCurrentCrc) return true;
	return false;
	
	return true;
FAIL_READ :
	if( nFd >= 0 )
		close(nFd);
	free(pszFileData);
	return true;
}
#endif
void CfgFileInfo::m_fnClear()
{
	m_unReadSz=0;m_bIsDir = false;
	memset(m_szTime,0x00,20);memset(&m_stFileInfo,0x00,sizeof(struct stat));
	memset(&m_stTm,0x00,sizeof(tm));
	m_nYr  = 0;m_nMon = 0;m_nDay = 0;m_nHr  = 0;m_nMin = 0;	m_nSec = 0;
	m_unCurrentModiTime = 0; m_unPrevModiTime = 0; m_unPrevCrc = 0;m_ulCurrentCrc=0;
	m_bCheckInit = false;m_unPrevSize = 0; m_unCurrentSize = 0;
}
void CfgFileInfo::m_fnChangeLastTime(unsigned int _unTime)
{
	m_fnChangeTouchTime((KCSTR)m_clsPath,_unTime);
}
void CfgFileInfo::m_fnChangeLastTime(const char * _pszTime)
{
	m_fnChangeTouchTime((KCSTR)m_clsPath,_pszTime);
}
bool CfgFileInfo::m_fnWriteFile(char * _pszBody,unsigned int _unLen)
{
	if(_pszBody==NULL) return false;
	#if 0 // cwkim Default Create Dir
	CfgFile::m_fnCreateDirExeptFile((KCSTR)m_clsPath); chmod((KCSTR)m_clsPath,0755);
	#endif
	bool bRet = FileControl::m_fnWrite((KCSTR)m_clsPath, _pszBody,_unLen);
	if(bRet == false)
	{
		LogInternal(E_LOG_ERR,"Write CfgFile Faild : %s",(KCSTR)m_clsPath);
	}
	m_fnUpdateTime();m_fnUpdateCRC();
	return bRet;
}
unsigned int CfgFileInfo::m_fnGetFileSize()
{
	if(m_bIsDir) return 0;
	if(KString::m_fnStrLen((KCSTR)m_clsPath)==0) return 0;	
	return (unsigned int)(m_stFileInfo.st_size);
}
void CfgFileInfo::m_fnEnableCheckChanged(bool _bEnhanced)
{
	if(m_bCheckInit ==false) 
	{
		m_bCheckInit = true;m_fnUpdateTime();
		if(_bEnhanced)
		{
			m_bEnhanced = true; m_fnUpdateCRC();
		}
	}
}
bool CfgFileInfo::m_fnCheckChanged()
{
	if(m_bCheckInit == false) return false;
	if(m_fnUpdateTime())
	{
		return m_fnUpdateCRC();
		//return true;    // Skipp Notify 
	}
	else if(m_bEnhanced)
	{
		return m_fnUpdateCRC();
	}
	return false;
}
char * CfgFileInfo::m_fnGetTimeString(unsigned int _unTime,char * _pszSource)
{
	time_t stTime = (time_t)_unTime; tm stTm;localtime_r(&stTime,&stTm);	
	sprintf(_pszSource,"%04d-%02d-%02d-%02d-%02d-%02d",
											stTm.tm_year + 1900,
											stTm.tm_mon +1,
											stTm.tm_mday,
											stTm.tm_hour,
											stTm.tm_min,
											stTm.tm_sec);
	return _pszSource;
}
unsigned int CfgFileInfo::m_fnGetTimeInt(char * _pszSource)
{
	//2016-04-28-12-56-12
	struct tm stTm;time_t unTime;
	stTm.tm_year = KString::m_fnAtoi(&_pszSource[0]) - 1900;
	stTm.tm_mon =  KString::m_fnAtoi(&_pszSource[5])-1;
	stTm.tm_mday =KString::m_fnAtoi(&_pszSource[8]); 
	stTm.tm_hour = KString::m_fnAtoi(&_pszSource[11]);
	stTm.tm_min = KString::m_fnAtoi(&_pszSource[14]);
	stTm.tm_sec = KString::m_fnAtoi(&_pszSource[17]);
	unTime = mktime(&stTm);
	return (unsigned int)unTime;
}
void CfgFileInfo::m_fnChangeTouchTime(const char * _pszPath,unsigned int _unTime)
{	
	struct utimbuf stUt; stUt.modtime = (time_t)_unTime;
	utime(_pszPath,&stUt);
}
void CfgFileInfo::m_fnChangeTouchTime(const char * _pszPath,const char * _pszTime)
{	
	//2016-04-28-12-56-12
	struct tm stTm;time_t unTime;
	stTm.tm_year = KString::m_fnAtoi(&_pszTime[0]) - 1900;
	stTm.tm_mon =  KString::m_fnAtoi(&_pszTime[5])-1;
	stTm.tm_mday =KString::m_fnAtoi(&_pszTime[8]); 
	stTm.tm_hour = KString::m_fnAtoi(&_pszTime[11]);
	stTm.tm_min = KString::m_fnAtoi(&_pszTime[14]);
	stTm.tm_sec = KString::m_fnAtoi(&_pszTime[17]);
	unTime = mktime(&stTm);
	struct utimbuf stUt; stUt.modtime = unTime;
	utime(_pszPath,&stUt);
}
unsigned long CfgFileInfo::m_fnGetCRC(unsigned int _unCrc, char * _pszSrc, unsigned int _unSize)
{
	if(_unSize ==0) return 0;
	char *pszTmp = _pszSrc;_unCrc = _unCrc ^ ~0U;
	while (_unSize--)
		_unCrc = s_arrCrc32[(_unCrc ^ *pszTmp++) & 0xFF] ^ (_unCrc >> 8);
	return _unCrc ^ ~0U;
}
/*************************** Static Config File Check Timer ************************************/
TimerTable<CfgTimerData_t> * g_pclsCfgTimer = NULL;
static void s_fnSetCfgTimer(CfgFile * _pclsCfg)
{
	if(g_pclsCfgTimer == NULL) return;
	CfgTimerData_t * pstTime = new CfgTimerData_t;
	pstTime->m_pclsCfg = _pclsCfg;
	g_pclsCfgTimer->setTimer(pstTime,100);
	
}
static void s_fnCbkCfgTimeOut(CfgTimerData_t * _pstData)
{
	if(g_pclsCfgTimer == NULL) {delete _pstData;return;}
	_pstData->m_pclsCfg->m_fnTimerCheckProc();	
	CfgTimerData_t * pstTime = new CfgTimerData_t;
	pstTime->m_pclsCfg = _pstData->m_pclsCfg;
	g_pclsCfgTimer->setTimer(pstTime,100);
	delete _pstData;
}
/**************************** Config Param Class ******************************************/
CfgValue::CfgValue(){m_eType=E_CFG_TYPE_NONE;m_bTrim = false;}
CfgValue::~CfgValue(){}
void CfgValue::m_fnBuild(KString &_rclsBuild)
{
	if(m_eType == E_CFG_TYPE_COMMENT)
	{
		_rclsBuild<<(KCSTR)KString::m_fnStr((KSTR)m_clsVal)<<(KCSTR)"\r\n";
	}
	else if(m_eType == E_CFG_TYPE_CATEGORY)
	{
		_rclsBuild<<(KCSTR)"\r\n["<<(KCSTR)KString::m_fnStr((KSTR)m_clsVal)<<(KCSTR)"]\r\n";
	}
	else if(m_eType == E_CFG_TYPE_ITEM)
	{
		_rclsBuild<<(KCSTR)KString::m_fnStr((KSTR)m_clsKey)<<(KCSTR)"=";
		_rclsBuild<<(KCSTR)KString::m_fnStr((KSTR)m_clsVal)<<(KCSTR)"\r\n";
	}
}
bool CfgValue::m_fnGetBool()
{
	if(m_clsVal == "TRUE" || (m_clsVal == "true") || (m_clsVal == "1")) return true;
	else return false;
}
unsigned int CfgValue::m_fnGetInt()
{
	if(KString::m_fnStrLen((KSTR)m_clsVal) == 0) return 0;
	char * pszVal = (KSTR)m_clsVal;
	if(KString::m_fnStrnCmp(pszVal,(char*)"0x", 2)==0)
	{
		unsigned int unRetVal = 0;	
		sscanf(pszVal,(char*)"%x", &unRetVal); 
		for( int i = 0;i<KString::m_fnStrLen((KSTR)m_clsVal);i++)
		{
			if((pszVal[i] == 'k') || (pszVal[i] == 'K'))
			{
				return unRetVal*DEF_CFG_1K;
			}
			else if((pszVal[i] == 'm') || (pszVal[i] == 'M'))
			{
				return unRetVal*DEF_CFG_1M;
			}
			else if((pszVal[i] == 'g') || (pszVal[i] == 'G'))
			{
				return unRetVal*DEF_CFG_1G;
			}
		}
	}
	else 
	{
		return KString::m_fnAtoi((KSTR)m_clsVal);     
	}
	return 0;
}
void CfgValue::m_fnDebug(char * _pszDebug,unsigned int _unSize)
{
	KString::m_fnStrnCat(_pszDebug,_unSize,"[%s] Key: [%s], Val: [%s]\r\n",g_fnStringCfg(m_eType),
							KString::m_fnStr((KSTR)m_clsKey),KString::m_fnStr((KSTR)m_clsVal));
}
void CfgValue::m_fnSetVal(ECfgType_t _eT, const char * _pszCategory, 
														const char * _pszKey, const char * _pszVal)
{
	KString clsKey; clsKey<<(KSTR)_pszCategory<<(KSTR)_pszKey;m_fnSetKey((KSTR)clsKey); 
	m_clsKey = _pszKey;m_clsVal = _pszVal;m_clsCategoryName=_pszCategory;
	m_eType = _eT;
}
bool CfgValue::m_fnIsEqual(ECfgType_t _eT, const char * _pszCategory,const char * _pszKey)
{
	if((m_eType==_eT)&&(m_clsCategoryName==_pszCategory)	&& (m_clsKey == _pszKey)) return true;
	return false;													
}
void CfgValue::m_fnTrim()
{
	if(m_bTrim== false)
	{
		m_bTrim = true;KString::m_fnTrimTailString((KSTR)m_clsVal," ");
	}
}
/**************************** Config Class ************************************************/		
CfgFile::CfgFile()
{
	m_pstDefaultParams=NULL;m_unReadSize = 0; m_bReadChanged = false;
	m_bAutoRemove = true; m_unRealSize = 0;m_pvUser = NULL;
	if(g_pclsCfgTimer == NULL)
		g_pclsCfgTimer = new TimerTable<CfgTimerData_t>(s_fnCbkCfgTimeOut,"CfgFile");
}
CfgFile::~CfgFile()
{
}
void CfgFile::m_fnLoadConfig(const char * _pszPath,DefaultCfgItem_t *pDefault, bool _bAutoRemove)
{
	m_pstDefaultParams = pDefault;m_bAutoRemove = _bAutoRemove; m_clsFileName = _pszPath;
	m_clsFileInfo.m_fnInit((KCSTR)m_clsFileName); m_fnReLoadConfig();
}
void CfgFile::m_fnReLoadConfig()
{
	m_fnClearConfig();	m_fnCreateDirExeptFile((KSTR)m_clsFileName);
	FILE *pFile = NULL;chmod((KCSTR)m_clsFileName,0755);
	pFile = fopen((const char*)(KSTR)m_clsFileName,(char*)"r");
	if(pFile == NULL)
	{
		pFile = fopen((const char*)(KSTR)m_clsFileName,(char*)"a");
		if(pFile == NULL)
		{
			LogInternal(E_LOG_ERR,"[%s-%s-%u] File Open Failed, (%s)",
													__FILE__,__func__,__LINE__,(KCSTR)m_clsFileName);
			return;
		}
		KString clsComment; 
		clsComment<<(KCSTR)"# <"<<(KCSTR)m_clsFileName<<(KCSTR)"> Process Config File\r\n";
		fwrite((KCSTR)clsComment,strlen((KCSTR)clsComment),1,pFile);
		fflush(pFile);
	}
	fclose(pFile);
	chmod((KCSTR)m_clsFileName,0755);
	m_clsFileInfo.m_fnUpdateTime();m_clsFileInfo.m_fnUpdateCRC();
	m_fnReadFile();
	bool bWrite = false;
	bWrite |=m_fnAutoStoreDefaultCfg(m_pstDefaultParams);
	bWrite |=m_fnAutoRemoveNotDefineCfg();
	if(bWrite)
	{
		m_fnWriteFile();m_fnClearConfig();
		m_clsFileInfo.m_fnUpdateTime();m_clsFileInfo.m_fnUpdateCRC();
		m_fnReadFile();
	}
}
CfgValue & CfgFile::m_fnFindVal(const char *_pszCategory, const char *_pszKey,bool * _pbResult)
{
	CfgValue * pclsVal = m_fnFindParam(_pszCategory,_pszKey);
	if(pclsVal==NULL)
	{
		if(_pbResult) *_pbResult = false;
		return m_clsExepVal;
	}
	if(_pbResult) *_pbResult = true;
	return *pclsVal;
}
void CfgFile::m_fnSetVal(const char *StrSubject,const char *StrKey,KString _clsVal)
{
	CfgValue * pclsVal = m_fnFindParam(StrSubject,StrKey);
	if(pclsVal)
	{
		pclsVal->m_clsVal = _clsVal;
	}
	else 
	{
		if(m_fnIsExistCategory(StrSubject)==false)
		{	
			m_fnAddVal(E_CFG_TYPE_CATEGORY,"category",StrSubject,StrSubject);
		}
		unsigned int unIndex = m_fnGetCategoryLineIndex(StrSubject);
		m_fnInsertVal(E_CFG_TYPE_ITEM,StrSubject, StrKey,(KCSTR)_clsVal,unIndex);
	}
}
void CfgFile::m_fnDebug(char * _pszDebug,unsigned int _unSize)
{
	ListItr_t clsIter;
	CfgValue * pclsCate = m_fnBegin(clsIter);
	while(pclsCate)
	{
		pclsCate->m_fnDebug(_pszDebug,_unSize);
		pclsCate = m_fnNext(clsIter);
	}
}
int CfgFile::m_fnReadFile()
{
	if(m_clsFileInfo.m_unReadSz ==0) return 0;
	m_fnParse(m_clsFileInfo.m_pszRawData);
	return 1;
}
bool CfgFile::m_fnWriteFile()
{
	if(KString::m_fnStrLen((KCSTR)m_clsFileName)==0) return false;
	#if 0 // cwkim Default Create Dir
	m_fnCreateDirExeptFile((KSTR)m_clsFileName);
	chmod((KSTR)m_clsFileName,0755);
	#endif
	KString clsBuff; clsBuff.m_fnReSize(DEF_CFG_1M);m_fnBuild(clsBuff);
	return FileControl::m_fnWrite((KCSTR)m_clsFileName,(KCSTR)clsBuff,clsBuff.m_unRealLen);
}
void CfgFile::m_fnParse(char * _pszRaw)
{
	CfgParseLineStrings clsArray;
	m_fnTokenizeC(_pszRaw,"\r\n",clsArray);
	ListItr_t itrLine;char *pszLine = clsArray.m_fnBegin(itrLine);
	KString clsCurrentSubject;
	unsigned int unCategoryCnt = 0;
	KString clsCmdKeyGen;
	CfgCategoryNum *pclsCurrentInfo = NULL;
	char * pszRealLine = NULL;
	while(pszLine)
	{
		pszRealLine = KString::m_fnGetOptimizeString(pszLine," ");
		if(pszRealLine == NULL)
		{
			pszLine = clsArray.m_fnNext(itrLine); continue;
		}
		if(pszRealLine[0] == '#')
		{
			clsCmdKeyGen=(KSTR)NULL;
			clsCmdKeyGen<<(KCSTR)DEF_CFG_MAGIC_CODE<<(KUINT)(unCategoryCnt++);
			m_fnAddVal(E_CFG_TYPE_COMMENT,"comment",(KSTR)clsCmdKeyGen,pszRealLine);
		}
		else if(pszRealLine[0] == '[')
		{
			pszRealLine = KString::m_fnGetOptimizeString(pszRealLine," []");
			clsCurrentSubject = pszRealLine;
			pclsCurrentInfo=m_fnAddCateInfo(pszRealLine);
			if(pclsCurrentInfo==NULL)
			{
				//ELOG(_ERR,"Illegal Cfg File, %s",(KSTR)m_clsFileName);
				return;
			}
			m_fnAddVal(E_CFG_TYPE_CATEGORY,"category",pszRealLine,pszRealLine);
			pclsCurrentInfo->m_unParamNums = m_list.m_fnGetSize();
		}
		else
		{
			char * pszKey;char *pszVal;
			m_fnTokenizeParam(pszRealLine,&pszKey,&pszVal);
			if(pszKey && pszVal)
			{
				m_fnAddVal(E_CFG_TYPE_ITEM,(KSTR)clsCurrentSubject,pszKey,pszVal);
				if(pclsCurrentInfo)
				{
					pclsCurrentInfo->m_unParamNums = m_list.m_fnGetSize();
				}
			}
		}
		pszLine = clsArray.m_fnNext(itrLine);
	}
}
KString & CfgFile::m_fnGetComVal(CfgFile * _pclsCom, const char * _pszCategory, const char * _pszKey,bool * _pbResult)
{
	CfgValue & rclsValCfg = m_fnFindVal(_pszCategory,_pszKey,_pbResult);
	KString & rclsVal = rclsValCfg.m_clsVal;
	if(_pbResult && _pbResult==false)
	{
		return rclsVal;
	}
	else
	{
		if(_pclsCom==NULL)
		{
			if(rclsVal.m_unRealLen==0)
			{
				if(_pbResult) * _pbResult = false;
				return rclsVal;
			}
			else
			{
				if(_pbResult) * _pbResult = true;
				return rclsVal;
			}
		}
		else
		{
			std::string clsComVal;
			if(!m_fnGetCommonCfg((KCSTR)rclsVal,clsComVal,_pclsCom))
			{
				if(rclsVal.m_unRealLen==0)
				{
					if(_pbResult) * _pbResult = false;
					return rclsVal;
				}
				else
				{
					if(_pbResult) * _pbResult = true;
					return rclsVal;
				}
			}
			else
			{
				if(clsComVal.size()==0)
				{
					if(_pbResult) * _pbResult = false;
					return rclsVal;
				}
				else
				{
					if(_pbResult) * _pbResult = true;
					rclsValCfg.m_clsTemplateVal =clsComVal.c_str();
					return rclsValCfg.m_clsTemplateVal;
				}
			}
		}
	}
}
bool CfgFile::m_fnGetCommonCfg(const char * _pszOrigValue, std::string & _rclsCommonValue,CfgFile * _pclsCom)
{
	_rclsCommonValue = "";
	bool bResult = false;
	std::string clsCommonSection;
	std::string clsCommonKey;	
	const char * pszCurrentPos = _pszOrigValue;
	const char * pszEndOrigPos = _pszOrigValue + strlen(_pszOrigValue);
	const char * pszTmp = NULL;
	const char * pCommonStartPos = NULL;
	const char * pCommonEndPos = NULL;
	const char * pCommonSecStartPos = NULL;
	const char * pCommonSecEndPos = NULL;
	const char * pCommonKeyStartPos = NULL;
	const char * pCommonKeyEndPos = NULL;
	while( pszCurrentPos < pszEndOrigPos )
	{
		//get start of common
		pCommonStartPos = strstr(pszCurrentPos, "$$$");
		if( !pCommonStartPos )
		{
			if( bResult )
			_rclsCommonValue.append(pszCurrentPos, pszEndOrigPos-pszCurrentPos);
			break;
		}
		else
		{
			//get end of common
			pCommonEndPos = strstr(pCommonStartPos+strlen("$$$"), "$$$");
			if( !pCommonEndPos )
			{
				if( bResult )
				_rclsCommonValue.append(pszCurrentPos, pszEndOrigPos-pszCurrentPos);
				break;
			}
			//copy previous non-common part
			if( pszCurrentPos != pCommonStartPos )
			_rclsCommonValue.append(pszCurrentPos, pCommonStartPos-pszCurrentPos);
			pCommonStartPos += strlen("$$$");
			//get section of common
			pCommonSecStartPos = pCommonStartPos;
			pCommonSecEndPos = strstr(pCommonSecStartPos, ".");
			if( !pCommonSecEndPos )
			{
				goto NEXT_LOOP;
			}
			//get key of common
			pCommonKeyStartPos = pCommonSecEndPos + strlen(".");
			pCommonKeyEndPos = pCommonEndPos;			
			//get value of common			
			clsCommonSection.assign(pCommonSecStartPos, pCommonSecEndPos-pCommonSecStartPos);
			clsCommonKey.assign(pCommonKeyStartPos, pCommonKeyEndPos-pCommonKeyStartPos);	
			pszTmp = (KSTR)_pclsCom->m_fnFindVal(clsCommonSection.c_str(), clsCommonKey.c_str(), &bResult);
			if( bResult && pszTmp )
			_rclsCommonValue += pszTmp;
			NEXT_LOOP :
			pszCurrentPos = pCommonEndPos + strlen("$$$");
			bResult = true;
		}		
	}
	return bResult;
}
bool CfgFile::m_fnTokenizeC(char *_pszOrig,const char *_pszTrimChr,CfgParseLineStrings &_rclsResult)
{
	if(_pszOrig == NULL) return false;
	unsigned int pTrim_Len = KString::m_fnStrLen(_pszTrimChr);
	unsigned int i=0;unsigned int j=0;int prev_st = 0;int next_st = 0;
	bool bmatch = false; unsigned int unOrigLen = KString::m_fnStrLen(_pszOrig);
	for(i = 0;i<unOrigLen;i++)
	{
		for(j = 0;j<pTrim_Len;j++)
		{
			if(_pszOrig[i] == _pszTrimChr[j]){_pszOrig[i] = 0;prev_st = 0;break;}
			else prev_st = 1;
		}
		if(prev_st != next_st)
		{
			if(prev_st == 1)   // Detecting String
			{
				if(i == 0) bmatch = false;
				else bmatch = true;
				_rclsResult+= &_pszOrig[i];
			}
		}
		next_st = prev_st;
	}
	if(bmatch) return true;
	else return false;
}
bool CfgFile::m_fnTokenizeS(char *_pszOrig,const char *_pszTrimStr,CfgParseLineStrings &_rclsResult)
{
	if(_pszOrig == NULL) return false;
	unsigned int match_idx = 0;int match_temp = -1;int Result_Num = 0;
	unsigned int pTrim_Len = KString::m_fnStrLen(_pszTrimStr);
	unsigned int unOrigLen = KString::m_fnStrLen(_pszOrig);
	if(unOrigLen<= pTrim_Len) return false;
	while(1)
	{
		match_temp = s_fnStrStr2(&_pszOrig[match_idx],(char*)_pszTrimStr);
		if(match_temp  == (-1))
		{
			if((Result_Num) > 0) return true;
			else return false;
		}
		match_idx += match_temp;memset(&_pszOrig[match_idx],0x00,pTrim_Len);
		match_idx+=pTrim_Len;		
		if(match_idx >= unOrigLen) return true;
		if(match_temp == 0)
		{
			if((Result_Num) > 0)
			{
				Result_Num--;_rclsResult.m_listString.m_fnDelTail();
			}
		}
		else if(match_temp > 0)
		{
			if((Result_Num) == 0)
			{
				Result_Num++;_rclsResult+= &_pszOrig[0];
			}
		}
		Result_Num++;_rclsResult+= &_pszOrig[match_idx];
	}
	return true;
}
bool CfgFile::m_fnTokenizeP(char *_pszOrig, const char *_pszPattern,CfgParseLineStrings &_rclsResult)
{
	if(_pszOrig == NULL) return false;
	int plen = KString::m_fnStrLen(_pszPattern);unsigned int unOrigLen = KString::m_fnStrLen(_pszOrig);
	int p_cnt = 0;int bPrev_P = 3;int bNext_P = 3;char *pTemp = NULL;
	for(unsigned int i=0;i<unOrigLen;i++)
	{
		if(bPrev_P == 1)
		{
			if(_pszOrig[i] != _pszPattern[p_cnt]) bPrev_P = 2;
			else  return false;
		}
		else 
		{
			if(_pszOrig[i] == _pszPattern[p_cnt]){bPrev_P = 1;p_cnt++;_pszOrig[i]=0;}
			else bPrev_P = 2;
		}
		if(bPrev_P != bNext_P)
		{
			if(bPrev_P == 2)
			{
				pTemp = &_pszOrig[i];
				for(unsigned int k=0;((pTemp[k]!=_pszPattern[p_cnt])||(pTemp[k]==0));k++)
				{
					if(pTemp[k] != ' ')
					{
						if(KString::m_fnStrLen(&(pTemp[k]))>0)
						{
							_rclsResult+=&_pszOrig[i+k];
						}
						break;
					}
				}
			}
		}
		bNext_P = bPrev_P;
	}
	if(plen != p_cnt) return false;
	return true;
}
bool CfgFile::m_fnIsDir(const char *pname)
{
   struct stat buf;
   if (stat(pname, &buf) != 0) return false;
   if ((buf.st_mode & S_IFDIR) == S_IFDIR) return true;
   else return false;
}
void CfgFile::m_fnCreateDir(const char * _pszPath)
{
	// ../log/abc/def  
	// ./log/abc/def
	// log/abc/def
	// /home/abc/def
	 unsigned int unSlashCnt = 0;
	 for(int i = 0; i< KString::m_fnStrLen(_pszPath);i++)
 	{
		if(_pszPath[i] == '/')
		{
			unSlashCnt++;
			if(unSlashCnt >= 1)
			{
				char szTmp[1024];memcpy(szTmp,_pszPath,i+1);szTmp[i+1]=0;
				if (m_fnIsDir(szTmp) == false){umask(0); mkdir(szTmp,0755);}
			}			
		}
		
 	}
	if (m_fnIsDir(_pszPath) == false){umask(0); mkdir(_pszPath,0755);}
}
void CfgFile::m_fnCreateDirExeptFile(const char * _szPath)
{
	unsigned int unLen = KString::m_fnStrLen(_szPath);
	unsigned int unSlashCnt = 0;
	unsigned int unLastSlashPos = 0;
	char szTmp[512];memset(szTmp,0x00,512);
	KString::m_fnStrnCatCpy(szTmp,_szPath,512);
	szTmp[unLen]=0;
	for(unsigned int i=0;i<unLen;i++)
	{
		if(szTmp[i] == '/')
		{
			unSlashCnt++; 
			unLastSlashPos = i;
		}
	}
	if(unSlashCnt > 1)
	{
		szTmp[unLastSlashPos] = 0;
		m_fnCreateDir(szTmp);
	}
}
void CfgFile::m_fnTokenizeParam(char * _pszOrig, char **_ppszKey, char ** _ppszVal)
{
	*_ppszKey = NULL; *_ppszVal = NULL;
	char * pszStart = KString::m_fnGetOptimizeString(_pszOrig," ");
	unsigned int nLen = KString::m_fnStrLen(pszStart);
	if(pszStart == NULL) return;
	bool bVal = false;
	for(unsigned int i=0;i<nLen;i++)
	{
		if(bVal)
		{
			if(pszStart[i] == '=' || pszStart[i] == ' ')
			{
				pszStart[i] = 0x00;
			}
			else
			{
				//*_ppszVal  = &pszStart[i];
				*_ppszVal = KString::m_fnSkipString(&pszStart[i]," ");
				return;
			}
		}
		else
		{
			if(pszStart[i] == '=')
			{
				pszStart[i]=0x00;
				*_ppszKey = KString::m_fnTrimTailString(pszStart," ");
				bVal = true;
			}
		}
	}
}
void CfgFile::m_fnClearConfig()
{
	m_list.m_fnClear(); 	m_listCateNum.m_fnClear();
}
bool CfgFile::m_fnStoreDefaultVal(const char *StrSubject, char *StrKey,char *StrVal)
{
	CfgValue *pNode = m_fnFindParam(StrSubject,StrKey);
	if(!pNode)
	{
		if(m_fnIsExistCategory(StrSubject)==false)
		{	
			m_fnAddVal(E_CFG_TYPE_CATEGORY,"category",StrSubject,StrSubject);
			CfgCategoryNum *pclsCurrentInfo=m_fnAddCateInfo(StrSubject);
			if(pclsCurrentInfo)
			{
				pclsCurrentInfo->m_unParamNums = m_list.m_fnGetSize();
			}
		}
		unsigned int unIndex = m_fnGetCategoryLineIndex(StrSubject);
		m_fnInsertVal(E_CFG_TYPE_ITEM,StrSubject, StrKey,StrVal,unIndex);
		return true;
	}
	return false;
}
bool CfgFile::m_fnAutoStoreDefaultCfg(DefaultCfgItem_t *pDefault)
{
	bool ret = false;
	if(!pDefault) return false;
	for(int i=0;pDefault[i].subject!=NULL;i++)
	{
		ret |= m_fnStoreDefaultVal((char*)pDefault[i].subject,(char*)pDefault[i].key,(char*)pDefault[i].val);	
	}
	return ret;
}
bool CfgFile::m_fnAutoRemoveNotDefineCfg()
{
	if(m_pstDefaultParams==NULL) return false;
	if(m_bAutoRemove == false) return false;
	ListItr_t clsIter; bool bWrite = false;
	CfgValue * pclsVal = m_fnBegin(clsIter);
	while(pclsVal)
	{
		if(pclsVal->m_eType == E_CFG_TYPE_CATEGORY)
		{
			if(!m_fnIsDefinedCategory((KSTR)pclsVal->m_clsVal))
			{
				bWrite = true;
				pclsVal->m_eType = E_CFG_TYPE_NOT_DEFINED;
			}
		}
		else if(pclsVal->m_eType == E_CFG_TYPE_ITEM)
		{
			if(!m_fnIsDefinedItem((KSTR)pclsVal->m_clsCategoryName,(KSTR)pclsVal->m_clsKey))
			{
				bWrite = true;
				pclsVal->m_eType = E_CFG_TYPE_NOT_DEFINED;
			}
		}
		pclsVal = m_fnNext(clsIter);
	}
	return bWrite;
}
CfgValue * CfgFile::m_fnAddVal(ECfgType_t _eT,const char *_pszCategory, 
														const char *_pszKey,const char *_pszVal)
{
	if(m_fnFindParam(_pszCategory,_pszKey)) return NULL;
	CfgValue * pclsNew = new CfgValue;
	pclsNew->m_fnSetVal(_eT,_pszCategory,_pszKey,_pszVal);
	if(m_list.m_fnPushBack(pclsNew,true)) return pclsNew;
	return NULL;
}
CfgValue * CfgFile::m_fnInsertVal(ECfgType_t _eT,const char *_pszCategory, 
										const char *_pszKey,const char *_pszVal,unsigned int _unIndex)
{
	if(m_fnFindParam(_pszCategory,_pszKey)) return NULL;
	CfgValue * pclsNew = new CfgValue;
	pclsNew->m_fnSetVal(_eT,_pszCategory,_pszKey,_pszVal);
	if(m_list.m_fnInsertIndex(pclsNew,_unIndex,true)) return pclsNew;
	return NULL;
}
CfgValue * CfgFile::m_fnFindParam(const char *_pszCategory, const char *_pszKey)
{
	ListItr_t clsIter;
	CfgValue * pclsVal = m_fnBegin(clsIter);
	while(pclsVal)
	{
		if(pclsVal->m_fnIsEqual(E_CFG_TYPE_ITEM,_pszCategory,_pszKey)) return pclsVal;
		pclsVal = m_fnNext(clsIter);
	}
	return NULL;
}
bool CfgFile::m_fnIsExistCategory(const char * _pszCategory)
{
	ListItr_t clsIter;
	CfgValue * pclsVal = m_fnBegin(clsIter);
	while(pclsVal)
	{
		if(pclsVal->m_eType == E_CFG_TYPE_CATEGORY &&
							pclsVal->m_clsCategoryName == "category" &&
							pclsVal->m_clsVal == _pszCategory) return true;
		pclsVal = m_fnNext(clsIter);
	}
	return false;
}
unsigned int CfgFile::m_fnGetCategoryLineIndex(const char * _pszCategory)
{
	CfgCategoryNum * pInfo = m_fnFindCateInfo(_pszCategory);
	if(pInfo == NULL) return m_list.m_fnGetSize();
	return (pInfo->m_unParamNums);
}
CfgCategoryNum * CfgFile::m_fnAddCateInfo(const char * _pszCategory)
{
	CfgCategoryNum *pclsNew = new CfgCategoryNum;pclsNew->m_fnSetKey(_pszCategory);
	if(!m_listCateNum.m_fnPushBack(pclsNew,true)) return NULL;
	return pclsNew;
}
CfgCategoryNum * CfgFile::m_fnFindCateInfo(const char * _pszCategory)
{
	return (CfgCategoryNum*)m_listCateNum.m_fnFindNode(_pszCategory);
}
bool CfgFile::m_fnIsDefinedCategory(const char * _pszCategory)
{
	if(m_pstDefaultParams == NULL) return true;
	for(int i=0;m_pstDefaultParams[i].subject!=NULL;i++)
	{
		if(KString::m_fnStrCmp(m_pstDefaultParams[i].subject,_pszCategory)==0) return true;		
	}
	return false;
}
bool CfgFile::m_fnIsDefinedItem(const char * _pszCategory,const char *_pszKey)
{
	if(m_pstDefaultParams == NULL) return true;
	for(int i=0;m_pstDefaultParams[i].subject!=NULL;i++)
	{
		if((KString::m_fnStrCmp(m_pstDefaultParams[i].subject,_pszCategory)==0) && 
			(KString::m_fnStrCmp(m_pstDefaultParams[i].key,_pszKey)==0))
			return true;
	}
	return false;
}
CfgValue * CfgFile::m_fnBegin(ListItr_t & _rclsItem){return (CfgValue*)m_list.m_fnBegin(_rclsItem);}
CfgValue * CfgFile::m_fnNext(ListItr_t & _rclsItem){return (CfgValue*)m_list.m_fnNext(_rclsItem);}
CfgCategoryNum * CfgFile::m_fnBeginCate(ListItr_t & _rclsItem)
{
	return (CfgCategoryNum*)m_listCateNum.m_fnBegin(_rclsItem);
}
CfgCategoryNum * CfgFile::m_fnNextCate(ListItr_t & _rclsItem)
{
	return (CfgCategoryNum*)m_listCateNum.m_fnNext(_rclsItem);
}
void CfgFile::m_fnBuild(KString & _rclsBuild)
{
	ListItr_t clsIter;CfgValue * pclsVal = m_fnBegin(clsIter);
	while(pclsVal)
	{
		pclsVal->m_fnBuild(_rclsBuild);
		pclsVal = m_fnNext(clsIter);
	}
	_rclsBuild<<(KCSTR)"\r\n";
}
void CfgFile::m_fnSetNotifyChangedFile(PFuncCfgChanged_t pFn,bool _bEnhanced, void * _pvUser)
{
	m_pvUser = _pvUser;m_pfnChanged = pFn;m_clsFileInfo.m_fnEnableCheckChanged(_bEnhanced);s_fnSetCfgTimer(this);
}
void CfgFile::m_fnSetNotifyChangedFileWithRead(PFuncCfgChanged_t pFn,bool _bEnhanced, void * _pvUser)
{
	m_bReadChanged = true;m_pvUser = _pvUser;m_pfnChanged = pFn;
	m_clsFileInfo.m_fnEnableCheckChanged(_bEnhanced);s_fnSetCfgTimer(this);
}
bool CfgFile::m_fnTimerCheckProc()
{
	bool bRet = m_clsFileInfo.m_fnCheckChanged();
	if(bRet)
	{
		if(m_pfnChanged)
		{
			if(m_bReadChanged) m_fnReLoadConfig();
			m_pfnChanged(this);
		}
	}
	return bRet;
}
}
