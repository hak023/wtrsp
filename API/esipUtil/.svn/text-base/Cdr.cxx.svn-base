
#include <string.h>

#include "ConfigFile.hxx"
#include "Cdr.hxx"
#include "log.hxx"
#include "Directory.hxx"

namespace eSipUtil
{
static const unsigned int s_unMaxQueueSize = 100000;
static const unsigned int s_unQueueWaitMs = 1000;		// 1 second wait
CdrMgr::CdrMgr()
{
	m_pclsCdrThread = NULL;
	m_pclsStm = NULL;
	m_nYear = 0;
	m_nMonth = 0;
	m_nDay = 0;
	m_nHour = 0;
	m_nMinute = 0;
	m_bInit = false;
}
CdrMgr::~CdrMgr()
{
	if(m_pclsStm) delete m_pclsStm;
	if(m_bInit)
	{
		m_pclsCdrThread->shutdown();
		m_pclsCdrThread->join();
		delete m_pclsCdrThread;
	}
}
void CdrMgr::m_fnInit(const char * _pszName, const char * _pszPath)
{
	m_clsName = _pszName; m_clsPath = _pszPath;
	Directorys::m_fnCatPath(m_clsPath);
	m_pclsCdrThread = new QueueThread<CdrData>;
	m_pclsCdrThread->setObject(this);
	m_pclsCdrThread->setMaxQueueSize(s_unMaxQueueSize);
	m_pclsCdrThread->setProcessCb(m_fnCbProcessCdr);
	m_pclsCdrThread->setQueueWaitMs(s_unQueueWaitMs);
	m_pclsCdrThread->setName(_pszName);
	m_pclsCdrThread->run();
	m_bInit = true;
	LogInternal(E_LOG_INFO, "%s:%s: Initialize Cdr",(KCSTR)m_clsName,__func__);
}
bool CdrMgr::m_fnAddCdr(CdrData * _pclsData)
{
	if(m_bInit == false) return false;
	if( !_pclsData )
	{
		LogInternal(E_LOG_ERR, "%s:%s: _pclsData is Null",(KCSTR)m_clsName,__func__);
		return false;
	}
	if( m_pclsCdrThread->put(_pclsData) )
	{
		return true;
	}
	else
	{
		LogInternal(E_LOG_ERR, "%s:%s: Queue Put Fail",(KCSTR)m_clsName,__func__);
		delete _pclsData;
		return false;
	}
}
void CdrMgr::m_fnCbProcessCdr(CdrData * _pclsData, void * _pObject)
{
	if( !_pObject )
	{
		LogInternal(E_LOG_ERR, "%s:%s: _pObject is NULL","NULL",__func__);
		if(_pclsData) delete _pclsData;
		return;
	}
	CdrMgr & rclsCdrMgr = *((CdrMgr *)_pObject);
	struct timespec stCurrentTs;clock_gettime(CLOCK_REALTIME, &stCurrentTs);struct tm tmTime;
	localtime_r(&(stCurrentTs.tv_sec), &tmTime);
	if( !rclsCdrMgr.m_pclsStm 
		|| rclsCdrMgr.m_nYear != tmTime.tm_year  || rclsCdrMgr.m_nMonth != tmTime.tm_mon 
		|| rclsCdrMgr.m_nDay != tmTime.tm_mday || rclsCdrMgr.m_nHour != tmTime.tm_hour 
		|| rclsCdrMgr.m_nMinute != tmTime.tm_min )
	{
		if(rclsCdrMgr.m_pclsStm) delete rclsCdrMgr.m_pclsStm;
		char szDir[256];memset(szDir,0x00,256);
		snprintf(szDir, 255, "%s%04d%02d%02d",(KCSTR)rclsCdrMgr.m_clsPath, 
											tmTime.tm_year + 1900, 
											tmTime.tm_mon+1, 
											tmTime.tm_mday);
		CfgFile::m_fnCreateDir(szDir);
		char szFullPath[256];memset(szFullPath,0x00,256);
		snprintf(szFullPath, 255, "%s/%s.%02d%02d", szDir, (KCSTR)rclsCdrMgr.m_clsName, 
																tmTime.tm_hour, tmTime.tm_min);
		rclsCdrMgr.m_pclsStm = new std::ofstream(szFullPath, std::ios_base::out | std::ios_base::app);
		if( !rclsCdrMgr.m_pclsStm )
		{
			LogInternal(E_LOG_ERR, "%s:%s: can't create ofstream : %02d%02d",
															(KCSTR)rclsCdrMgr.m_clsName,__func__,
															tmTime.tm_hour, tmTime.tm_min);
			if(_pclsData) delete _pclsData;
			return;
		}
		rclsCdrMgr.m_nYear = tmTime.tm_year;
		rclsCdrMgr.m_nMonth = tmTime.tm_mon;
		rclsCdrMgr.m_nDay = tmTime.tm_mday;
		rclsCdrMgr.m_nHour = tmTime.tm_hour;
		rclsCdrMgr.m_nMinute = tmTime.tm_min;
	}
	if(_pclsData) 
	{
		rclsCdrMgr.m_fnWriteCdr(*(rclsCdrMgr.m_pclsStm), *_pclsData);
		delete _pclsData;
	}
}
void CdrMgr::m_fnWriteCdr(std::ofstream & m_rclsStm, CdrData & _rstData)
{
	m_rclsStm<<(KCSTR)_rstData.m_clsBuff;
	m_rclsStm<<std::endl;
}
}
