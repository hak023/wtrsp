
#include <stdio.h>
#include <string.h>
#include <bitset>
#include "string.hxx"
#include "log.hxx"

namespace eSipUtil
{
static char s_digit0 = '0';
static char s_digit9 = '9';
char * strncat(char * _pszSrc, unsigned int _unMaxSrcLen, const char * _pszFormat, ...)
{
	if( !_pszSrc || _unMaxSrcLen == 0 )
		return _pszSrc;
	unsigned int unCurrentLen = strlen(_pszSrc);
	if( unCurrentLen >= _unMaxSrcLen -1 )
	{
		_pszSrc[_unMaxSrcLen-1] = 0x00;
	}
	else
	{
		char * pszTemp = &(_pszSrc[unCurrentLen]);
		va_list ap;
		va_start(ap, _pszFormat);
		vsnprintf(pszTemp, _unMaxSrcLen-unCurrentLen-1,_pszFormat, ap);
		va_end(ap);
	}
	return _pszSrc;
}
bool isDisitStr(const char * _pszSrc, unsigned int _unSrcLen)
{
	if( _unSrcLen == 0 || !_pszSrc )
		return false;

	unsigned int unStartIdx = 0;
	if( _pszSrc[0] == '+' || _pszSrc[0] == '-' )
		unStartIdx = 1;
	
	for( unsigned int i = unStartIdx; i < _unSrcLen; ++i )
	{
		if( _pszSrc[i] < s_digit0 || _pszSrc[i] > s_digit9 )
			return false;
	}

	return true;
}
void createRandomStr(char * _pszOutStr, unsigned int _unMaxLen)
{
	static const char arrChar[] =
		"0123456789"
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		"abcdefghijklmnopqrstuvwxyz";
	static const int nCharLen = sizeof(arrChar) - 1;
	static bool bInit = false;
	if( !bInit )
	{
		bInit = true;
		srand(time(NULL));
	}
	for( unsigned int i = 0; i < _unMaxLen; ++i )
	{
		_pszOutStr[i] = arrChar[rand() % nCharLen];
	}
}
void replaceAll(std::string & _rclsStr, const char * _pszOrigStr, const char * _pszChangeStr)
{
	if( !_pszOrigStr || strlen(_pszOrigStr) == 0 || !_pszChangeStr || strlen(_pszChangeStr) == 0 )
		return;

    size_t start_pos = 0;
    while( (start_pos = _rclsStr.find(_pszOrigStr, start_pos)) != std::string::npos )
    {
        _rclsStr.replace(start_pos, strlen(_pszOrigStr), _pszChangeStr);
        start_pos += strlen(_pszChangeStr);
    }
}
static int s_fnStrStr2(char *_pszSrc,char *_pszKey)
{
	if(_pszSrc==NULL || _pszKey==NULL) return -1;
	if(_pszSrc[0]==0 || _pszKey[0]==0) return -1;
	char *cp = (char *) _pszSrc;char *s1, *s2;
	int idx = 0;
	while (*cp)
	{
		s1 = cp;s2 = (char *) _pszKey;
		while (*s1 && *s2 && !(*s1 - *s2)) s1++, s2++;
		if (!*s2) return idx;
		cp++;idx++;
	}
	return -1;
}
/*********************************** String Class ****************************************/
KString::KString(){m_pszString = NULL;m_unLen=0;m_unRealLen=0;m_fnCreateString(E_SZ_STR_CAT);}
KString::KString(bool _bBool)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;
	if(_bBool) m_fnCreateString("true");
	else m_fnCreateString("false");
}
KString::KString(char _cVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;m_fnCat(_cVal);
}
KString::KString(unsigned char _ucVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;m_fnCat(_ucVal);
}
KString::KString(short _sVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;
	char * pszTemp = new char [E_SZ_NUM];memset(pszTemp,0x00,E_SZ_NUM);
	snprintf(pszTemp,E_SZ_NUM-1,"%d",_sVal);
	m_fnCat(pszTemp);delete [] pszTemp;
}
KString::KString(unsigned short _usVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;
	char * pszTemp = new char [E_SZ_NUM];memset(pszTemp,0x00,E_SZ_NUM);
	snprintf(pszTemp,E_SZ_NUM-1,"%u",_usVal);
	m_fnCat(pszTemp);delete [] pszTemp;
}
KString::KString(int _nVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;
	char * pszTemp = new char [E_SZ_NUM];memset(pszTemp,0x00,E_SZ_NUM);
	snprintf(pszTemp,E_SZ_NUM-1,"%d",_nVal);
	m_fnCat(pszTemp);delete [] pszTemp;
}
KString::KString(unsigned int _unVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;
	char * pszTemp = new char [E_SZ_NUM];memset(pszTemp,0x00,E_SZ_NUM);
	snprintf(pszTemp,E_SZ_NUM-1,"%u",_unVal);
	m_fnCat(pszTemp);delete [] pszTemp;
}
KString::KString(long _lVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;
	char * pszTemp = new char [E_SZ_NUM];memset(pszTemp,0x00,E_SZ_NUM);
	snprintf(pszTemp,E_SZ_NUM-1,"%ld",_lVal);
	m_fnCat(pszTemp);delete [] pszTemp;
}
KString::KString(unsigned long _ulVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;
	char * pszTemp = new char [E_SZ_NUM];memset(pszTemp,0x00,E_SZ_NUM);
	snprintf(pszTemp,E_SZ_NUM-1,"%lu",_ulVal);
	m_fnCat(pszTemp);delete [] pszTemp;
}
KString::KString(char * _pszVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;m_fnCat((const char *)_pszVal);
}
KString::KString(const char * _pszVal)
{
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;m_fnCat(_pszVal);
}
KString::KString(const KString & _rclsVal)
{
	KString & _rclsTmp = (KString &)_rclsVal;
	m_pszString = NULL;m_unLen=0;m_unRealLen=0;m_fnCat((const char *)_rclsTmp);
}
KString::KString(double _dVal)
{
	m_pszString = NULL; m_unLen = 0; m_unRealLen = 0;
	char * pszTemp = new char[E_SZ_NUM]; memset(pszTemp, 0x00, E_SZ_NUM);
	snprintf(pszTemp, E_SZ_NUM - 1, "%lf", _dVal);
	m_fnCat(pszTemp); delete[] pszTemp;
}
KString::~KString(){m_fnClear();}
void KString::m_fnReSize(unsigned int _unSize)
{
	m_fnCreateString(_unSize);
}
//==========> = Operator (Store)
KString & KString::operator=(bool _bBool)
{
	m_fnClear();if(_bBool){ m_fnCat("true");}else {m_fnCat("false");}return *this;
}
KString & KString::operator=(char _cVal)
{
	m_fnClear();m_fnCat(_cVal);return *this;
}
KString & KString::operator=(unsigned char _ucVal)
{
	m_fnClear();m_fnCat((unsigned char)_ucVal);return *this;
}
KString & KString::operator=(short _sVal)
{
	m_fnClear(); char * pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%d",_sVal);
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator=(unsigned short _usVal)
{
	m_fnClear(); char * pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%u",_usVal);m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator=(int _nVal)
{
	m_fnClear(); char * pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%d",_nVal);	
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator=(unsigned int _unVal)
{
	m_fnClear(); char * pszTmp = new char[E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%u",_unVal);
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator=(long _lVal)
{
	m_fnClear(); char * pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%ld",_lVal);	
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator=(unsigned long _unVal)
{
	m_fnClear(); char * pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%lu",_unVal);
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator=(char * _pszVal)
{
	m_fnClear(); m_fnCat((const char*)_pszVal);return *this;
}
KString & KString::operator=(const char * _pszVal)
{
	m_fnClear(); m_fnCat((const char*)_pszVal);return *this;
}
KString & KString::operator=(KString & _rclsSrc)
{
	m_fnClear(); m_fnCat((const char*)_rclsSrc);return *this;
}
KString & KString::operator=(double _dVal)
{
	m_fnClear(); char * pszTmp = new char[E_SZ_NUM]; memset(pszTmp, 0x00, E_SZ_NUM);
	snprintf(pszTmp, E_SZ_NUM - 1, "%lf", _dVal);
	m_fnCat(pszTmp); delete[] pszTmp; return *this;
}
//==========> == Operator (Equal)
bool KString::operator==(bool _bBool)
{
	if(m_pszString == NULL){return false;}
	if(strcasecmp(m_pszString,"true")==0)
	{if(_bBool) {return true;}return false;}
	else if(strcasecmp(m_pszString,"false")==0)
	{if(_bBool) {return false;}return true;}return false;
}
bool KString::operator==(char _cVal)
{
	if(m_pszString == NULL){ return false;}
	if(m_unRealLen != 1) {return false;}
	if(m_pszString[0] == _cVal){ return true;}return false;	
}
bool KString::operator==(unsigned char _ucVal)
{
	if(m_pszString == NULL) {return false;}
	if(m_unRealLen != 1) {return false;}
	if((unsigned char)m_pszString[0] == _ucVal){ return true;}return false;
}
bool KString::operator==(short _sVal)
{
	if(m_pszString == NULL){ return false;}
	short temp = (short)atoi(m_pszString);if(temp == _sVal) {return true;}return false;
}
bool KString::operator==(unsigned short _usVal)
{
	if(m_pszString == NULL) {return false;}
	unsigned short temp = (unsigned short)atoi(m_pszString);
	if(temp == _usVal) {return true;}return false;
}
bool KString::operator==(int _nVal)
{
	if(m_pszString == NULL) {return false;}
	int temp = (int)atoi(m_pszString);if(temp == _nVal) {return true;}return false;
}
bool KString::operator==(unsigned int _unVal)
{
	if(m_pszString == NULL) {return false;}
	unsigned int temp = (unsigned int)atoi(m_pszString);if(temp == _unVal) {return true;}return false;
}
bool KString::operator==(long _lVal)
{
	if(m_pszString == NULL) {return false;}
	long temp = (long)atol(m_pszString);
	if(temp == _lVal) {return true;}return false;
}
bool KString::operator==(unsigned long _ulVal)
{
	if(m_pszString == NULL) {return false;}
	unsigned long temp = (unsigned long)atol(m_pszString);
	if(temp == _ulVal) {return true;}return false;
}
bool KString::operator==(char * _szSrc)
{
	if(m_pszString == NULL || _szSrc == NULL){return false;}
	if(strcmp(m_pszString,(char*)_szSrc)==0){return true;}return false;
}
bool KString::operator==(const char * _szSrc)
{
	if(m_pszString == NULL || _szSrc == NULL) {return false;}
	if(strcmp(m_pszString,(char*)_szSrc)==0) {return true;}return false;
}
bool KString::operator==(KString & _rclsCmp)
{
	if(m_pszString==NULL || _rclsCmp.m_pszString==NULL){ return false;}
	if(m_unRealLen != _rclsCmp.m_unRealLen) {return false;}
	if(strcmp(m_pszString,_rclsCmp.m_pszString)==0) {return true;}return false;
}
bool KString::operator==(double _dVal)
{
	double dMy = m_fnAtof(m_pszString);
	if(dMy == _dVal) return true;
	return false;
}
//==========> << Operator (Add/Cat)
KString & KString::operator<<(bool _bVal){if(_bVal) {m_fnCat("true");}else {m_fnCat("false");}return *this;}
KString & KString::operator<<(char _cVal){m_fnCat((const char)_cVal);return *this;}
KString & KString::operator<<(unsigned char _ucVal){m_fnCat((const char)_ucVal);return *this;}
KString & KString::operator<<(short _sVal)
{
	char *pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%d",_sVal);
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator<<(unsigned short _usVal)
{
	char *pszTmp = new char[E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%u",_usVal);
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator<<(int _nVal)
{
	char *pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%d",_nVal);
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator<<(unsigned int _unVal)
{
	char *pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%u",_unVal);
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator<<(long _lVal)
{
	char *pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%ld",_lVal);
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator<<(unsigned long _ulVal)
{
	char *pszTmp = new char [E_SZ_NUM]; memset(pszTmp,0x00,E_SZ_NUM);
	snprintf(pszTmp,E_SZ_NUM-1,"%lu",_ulVal);
	m_fnCat(pszTmp); delete [] pszTmp;return *this;
}
KString & KString::operator<<(char * _pvVal){m_fnCat((const char*)_pvVal);return *this;}
KString & KString::operator<<(const char * _pvVal){m_fnCat((const char*)_pvVal);return *this;}
KString & KString::operator<<(KString & _rclsSrc){m_fnCat((const char*)_rclsSrc);return *this;}
KString & KString::operator<<(double _dVal)
{
	char *pszTmp = new char[E_SZ_NUM]; memset(pszTmp, 0x00, E_SZ_NUM);
	snprintf(pszTmp, E_SZ_NUM - 1, "%lf", _dVal);
	m_fnCat(pszTmp); delete[] pszTmp; return *this;
}
//==========> type casting operator
KString::operator KBOOL()
{
	if (m_pszString == NULL) { return false; }
	if (strcasecmp(m_pszString, "true") == 0)
	{
		return true;
	}
	else if (strcasecmp(m_pszString, "false") == 0)
	{
		return false;
	}return false;
}
KString::operator KCHR(){if(m_pszString == NULL) {return 0x00;}return (char)m_pszString[0];}
KString::operator KUCHR(){if(m_pszString == NULL){ return 0x00;}return (unsigned char)m_pszString[0];}
KString::operator KSTR(){return m_pszString;}
KString::operator KCSTR(){return (const char *)m_pszString;}
KString::operator KSHORT(){return (short)m_fnAtoi(m_pszString);}
KString::operator KUSHORT(){return (unsigned short)m_fnAtoi(m_pszString);}
KString::operator KINT(){return m_fnAtoi(m_pszString);}
KString::operator KUINT(){return (unsigned int)m_fnAtoi(m_pszString);}
KString::operator KLONG(){return m_fnAtol(m_pszString);}
KString::operator KULONG(){return (unsigned long)m_fnAtol(m_pszString);}
KString::operator KDOUBLE(){return m_fnAtof(m_pszString);}
//==========> [] Operator (Array Get/Set)
char & KString::operator[](unsigned int _unIndex)
{
	static char cRet = 0;if(m_pszString == NULL){return cRet;}
	if(m_unRealLen <=  _unIndex){return cRet;}return m_pszString[_unIndex];
}
void KString::m_fnCat(const char * _szSrc)
{
	unsigned int unNewLen = m_fnStrLen(_szSrc);
	if(unNewLen==0) return;
	if(m_pszString == NULL)
	{
		m_fnCreateString(_szSrc);
	}
	else if(m_unRealLen + unNewLen >= m_unLen)
	{
		m_unLen = m_unLen + unNewLen +E_SZ_STR_CAT;
		char * pszNew = new char [m_unLen];
		memcpy(pszNew,m_pszString,m_unRealLen);
		memcpy(&pszNew[m_unRealLen], _szSrc, unNewLen);
		m_unRealLen = m_unRealLen + unNewLen; 
		pszNew[m_unRealLen]= 0x00;
		delete [] m_pszString; m_pszString = pszNew;
	}
	else
	{
		memcpy(&m_pszString[m_unRealLen],_szSrc,unNewLen);
		m_unRealLen = m_unRealLen + unNewLen; 
		m_pszString[m_unRealLen]= 0x00;
	}
}
void KString::m_fnCat(const char _ucInput)
{
	if(m_pszString == NULL)
	{
		m_fnCreateString(E_SZ_CHR_CAT);m_pszString[0]=_ucInput;m_unRealLen = 1;
	}
	else if(m_unRealLen +1 >= m_unLen)
	{
		m_unLen = m_unLen +E_SZ_CHR_CAT;
		char * pszNew = new char [m_unLen];
		memcpy(pszNew,m_pszString,m_unRealLen);
		pszNew[m_unRealLen] = _ucInput;
		m_unRealLen++; 
		pszNew[m_unRealLen]= 0x00;
		delete [] m_pszString; m_pszString = pszNew;
	}
	else
	{
		m_pszString[m_unRealLen] = _ucInput;
		m_unRealLen++;
		m_pszString[m_unRealLen]=0x00;
	}
}
void KString::m_fnCat(int _nSpace, const char * _szSrc)
{
	unsigned int unSrcLen = m_fnStrLen(_szSrc);
	if(unSrcLen==0) return;
	unsigned int unSpace = abs(_nSpace);
	unsigned int unNewLen =  DEF_STR_TRUE_SELECT(unSpace>unSrcLen,unSpace,unSrcLen);
	if(m_pszString == NULL)
	{
		m_fnCreateString(unNewLen);
		m_fnFixedStrCat(m_pszString,_nSpace,_szSrc);
		m_unRealLen = unNewLen;
	}
	else if(m_unRealLen + unNewLen >= m_unLen)
	{
		m_unLen = m_unLen + unNewLen +E_SZ_STR_CAT;
		char * pszNew = new char [m_unLen];
		memcpy(pszNew,m_pszString,m_unRealLen);pszNew[m_unRealLen]=0x00;
		m_fnFixedStrCat(&pszNew[m_unRealLen],_nSpace,_szSrc);
		m_unRealLen += unNewLen;
		delete [] m_pszString; m_pszString = pszNew;
	}
	else
	{
		m_fnFixedStrCat(&m_pszString[m_unRealLen],_nSpace,_szSrc);
		m_unRealLen += unNewLen;
	}
}
void KString::m_fnHexCat(unsigned char _ucInput)
{
	static char hexc[] = "0123456789ABCDEF";
	unsigned int hi = 0; unsigned int low = 0;
	hi = (_ucInput & 0xF0)>>4;low = (_ucInput & 0x0F);
	m_fnCat((const char)hexc[hi]);m_fnCat((const char)hexc[low]);
}
char * KString::m_fnCatHexs(void * _pvData, unsigned int _unLen)
{
	m_fnCreateString(_unLen*4);unsigned int i=0;unsigned int j=0;unsigned int k=0;
	char * pszBody =(char*)_pvData;m_fnCat("\r\n\r\n");
	for(j=0,i=0;i<_unLen;i++)
	{
		j = i+1;k = j%E_HEX_LINE;
		if((k == 0) && (j != 1)){m_fnHexCat((unsigned char)(*(&pszBody[i]))); m_fnCat("\r\n");}
		else {m_fnHexCat((unsigned char)(*(&pszBody[i]))); m_fnCat(" ");}
	}
	m_fnCat("\r\n\r\n");return m_pszString;
}
void KString::m_fnByteCat(const char * _szSrc, unsigned int _unLen)
{
	if(_szSrc == NULL) return;
	if(m_pszString == NULL)
	{
		m_fnCreateString(_unLen); memcpy(m_pszString,_szSrc,_unLen);m_unRealLen = _unLen;
	}
	else if(m_unRealLen + _unLen >= m_unLen)
	{
		m_unLen = m_unLen + _unLen +E_SZ_STR_CAT;
		char * pszNew = new char [m_unLen];
		memcpy(pszNew,m_pszString,m_unRealLen);
		memcpy(&pszNew[m_unRealLen], _szSrc, _unLen);
		m_unRealLen = m_unRealLen + _unLen; 
		pszNew[m_unRealLen]= 0x00;
		delete [] m_pszString; m_pszString = pszNew;
	}
	else
	{
		memcpy(&m_pszString[m_unRealLen],_szSrc,_unLen);
		m_unRealLen = m_unRealLen + _unLen; 
		m_pszString[m_unRealLen]= 0x00;
	}
}
void KString::m_fnClear()
{
	if(m_pszString) delete [] m_pszString;
	m_pszString = NULL;m_unLen = 0;m_unRealLen = 0;
}
void KString::m_fnCreateString(unsigned int _uiSize)
{
	m_fnClear();
	m_unLen = _uiSize+1;m_pszString = new char [m_unLen];
	memset(m_pszString,0x00,m_unLen);
}
void KString::m_fnCreateString(const char * _szString)
{
	m_fnClear();
	m_unRealLen = m_fnStrLen(_szString);
	if(m_unRealLen==0) return;
	m_unLen = m_unRealLen+1;
	m_pszString = new char [m_unLen];
	memset(m_pszString,0x00,m_unLen);
	m_fnStrCpy(m_pszString,_szString);
}
//=====> Static Util Functions
int KString::m_fnStrLen(const char * _szString)
{
	if(_szString == NULL) return 0;
	return strlen(_szString);
}
int KString::m_fnStrCpy(char * _szDst, const char * _szSrc)
{
	if(_szDst == NULL || _szSrc == NULL) return -1;
	strcpy(_szDst,_szSrc); return 1;
}
void KString::m_fnStrnCatCpy(char * dst, const char * src, int _nMax)
{
	unsigned int len = m_fnStrLen(dst);
	unsigned int remain = _nMax-len-1;
	unsigned int srcLen = m_fnStrLen(src);
	if(remain < srcLen){ strncpy(&dst[len],src,remain);dst[(unsigned int)_nMax-1]=0x00;}
	else
	{
		strncpy(&dst[len],src,srcLen);dst[len+srcLen] = 0x00;
	}
}
void KString::m_fnStrCat(char *mstr,const char * pFormat,...)
{
	if(mstr==NULL) return;
	unsigned int len = m_fnStrLen(mstr);char *temp = &mstr[len];
	va_list ap;va_start(ap, pFormat);vsprintf(temp, pFormat, ap);va_end(ap);
}
int KString::m_fnStrnCat(char *_szSrc,unsigned int _unMaxSz,const char * _szVar,...)  // -2
{
	if(_szSrc==NULL) return -1;
	unsigned int unLen = strlen(_szSrc);
	if(unLen >= (_unMaxSz-1))
	{
		_szSrc[_unMaxSz-1]=0;return _unMaxSz;
	}
	char *pszTemp = &_szSrc[unLen];
	va_list ap;va_start(ap, _szVar);vsnprintf(pszTemp, _unMaxSz-unLen-1,_szVar, ap);va_end(ap);
	return 0;
}
int KString::m_fnStrCmp(const char * _sz1, const char * _sz2)
{
	if(_sz1 == NULL || _sz2 == NULL) return -1;
	return strcmp(_sz1,_sz2);
}
int KString::m_fnStrnCmp(const char * _sz1, const char * _sz2,unsigned int _unLen)
{
	if(_sz1 == NULL || _sz2 == NULL) return -1;
	return strncmp(_sz1,_sz2,_unLen);
}
int KString::m_fnStrCaseCmp(const char * _sz1, const char * _sz2)
{
	if(_sz1 == NULL || _sz2 == NULL) return -1;
	return strcasecmp(_sz1,_sz2);
}
int KString::m_fnStrnCaseCmp(const char * _sz1, const char * _sz2, unsigned int _unLen)
{
	if(_sz1 == NULL || _sz2 == NULL) return -1;
	return strncasecmp(_sz1,_sz2,_unLen);
}
int KString::m_fnAtoi(const char * _szString)
{
	if(_szString == NULL) return 0;
	return atoi(_szString);
}
long KString::m_fnAtol(const char * _szString)
{
	if(_szString == NULL) return 0;
	return atol(_szString);
}
double KString::m_fnAtof(const char * _szString)
{
	if (_szString == NULL) return 0;
	return atof(_szString);
}
char * KString::m_fnStrStr(const char * _pszSrc, const char * _pszFind)
{
	if(_pszSrc == NULL || _pszFind == NULL) return NULL;
	return strstr((char*)_pszSrc,(char*)_pszFind);
}
const char *KString::m_fnStr(char *_szStr)
{
	if(_szStr == NULL) return "";
	return DEF_STR_TRUE_SELECT(strlen(_szStr)>0, _szStr, "");
}
char * KString::m_fnTrimTailString(char * _pszSrc, const char * _pszTrim)
{
	int unLen = m_fnStrLen(_pszSrc);
	if(unLen==0) return NULL;
	unsigned int j = 0;bool btrim = false;
	for(unLen--;unLen >= 0;unLen--)
	{
		btrim = false;
		for(j = 0;j<strlen(_pszTrim);j++)
		{
			if(_pszSrc[unLen] == _pszTrim[j])
			{
				_pszSrc[unLen]=0x00;btrim = true;break;
			}
		}
		if(btrim == false) break;
	}
	if(_pszSrc[0]==0) return NULL;
	return _pszSrc;
}
char * KString::m_fnSkipString(const char * _pszSrc, const char * _pszTrim)
{
	if(m_fnStrLen(_pszSrc) <=0 || _pszTrim == NULL) return NULL;
	char *Ret = (char*)_pszSrc;
	unsigned int i=0;unsigned int j=0;unsigned int skp_cnt=0;bool btrim = false;
	while(1)
	{
		if(Ret[i]==0) 
		{
			return NULL;
		}
		btrim = false;
		for(j = 0;j<strlen(_pszTrim);j++)
		{
			if(Ret[i] == _pszTrim[j])
			{
				skp_cnt++;btrim = true;break;
			}
		}
		if(!btrim) return &Ret[skp_cnt];
		i++;
	}
	return NULL;
}
char *KString::m_fnGetOptimizeString(char * _pszSrc, const char * _pszTrim)
{
	if(m_fnStrLen(_pszSrc)==0 || m_fnStrLen(_pszTrim) == 0) return NULL;
	char * pszTmp = m_fnSkipString(_pszSrc,_pszTrim);
	return m_fnTrimTailString(pszTmp,_pszTrim);
}
unsigned int  KString::m_fnFixedStrCat(char * _pszDst, int _nSpace, const char * _pszSrc)
{
	unsigned int unDstLen = m_fnStrLen(_pszDst);unsigned int unSrcLen = m_fnStrLen(_pszSrc);
	int nSpace = abs(_nSpace);
	unsigned int unTotalLen = unDstLen;int unDiff = nSpace - unSrcLen; unsigned int i=0;
	if(_nSpace < 0)
	{
		for(i=0;i<unSrcLen;i++) _pszDst[unTotalLen+i] = _pszSrc[i];
		unTotalLen+=unSrcLen; _pszDst[unTotalLen] = 0;
		if(unDiff > 0)
		{
			for(i=0;i<(unsigned int)unDiff;i++)  _pszDst[unTotalLen+i] = ' ';
			unTotalLen+=unDiff; _pszDst[unTotalLen] = 0;
		}
	}
	else
	{
		if(unDiff > 0)
		{
			for(i=0;i<(unsigned int)unDiff;i++)  _pszDst[unTotalLen+i] = ' ';
			unTotalLen += unDiff;
			for(i=0;i<unSrcLen;i++) _pszDst[unTotalLen+i] = _pszSrc[i];
			unTotalLen+=unSrcLen; _pszDst[unTotalLen] = 0;
		}
		else
		{
			for(i=0;i<unSrcLen;i++) _pszDst[unTotalLen+i] = _pszSrc[i];
			unTotalLen+=unSrcLen; _pszDst[unTotalLen] = 0;
		}
	}
	return unTotalLen;
}
static const unsigned char s_arrHexToByte[256] = 
{
 // 0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // 0
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // 1
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // 2
   0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  'k','k','k','k','k','k',   // 3
   'k',0xA,0xB,0xC,0xD,0xE,0xF,'k','k','k','k','k','k','k','k','k',   // 4
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // 5
   'k',0xA,0xB,0xC,0xD,0xE,0xF,'k','k','k','k','k','k','k','k','k',   // 6
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // 8
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // 9
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // a
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // b
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // c
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // d
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k',   // e
   'k','k','k','k','k','k','k','k','k','k','k','k','k','k','k','k'    // f
};
static const bool s_arrIsCharHex[256] =
{
// 0       1       2       3       4       5       6       7       8       9       a       b       c       d       e       f
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // 0
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // 1
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // 2
   true ,  true ,  true ,  true ,  true ,  true ,  true ,  true ,  true ,  true ,  false,  false,  false,  false,  false,  false,  // 3
   false,  true ,  true ,  true ,  true ,  true ,  true ,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // 4
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // 5
   false,  true ,  true ,  true ,  true ,  true ,  true ,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // 6
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // 8
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // 9
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // a
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // b
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // c
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // d
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  // e
   false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false,  false   // f
};
void KString::m_fnUnEscapeToString(const char * _pszSrc,KString &_rclsResult)
{
	unsigned int unLen = m_fnStrLen(_pszSrc);
	if(unLen==0) return;
	const unsigned char* p = (unsigned char*)_pszSrc;
	unsigned char escaped = 0;
	while (p[0] !=0)
	{
		if(*p == '%' &&  p[2] !=0)
		{
			const char high = s_arrHexToByte[(unsigned char)*(p + 1)];
			const char low = s_arrHexToByte[(unsigned char)*(p + 2)];
			if (high!='k' && low!='k')
			{
				escaped = 0;            
				escaped = high << 4 | low;
				// !bwc! I think this check is bogus, especially the ':' (58) check
				// You could maybe argue that the point of %-escaping is to allow
				// the use of UTF-8 data (including ASCII that is not allowed in an 
				// on-the-wire representation of whatever it is we're unescaping),
				// and not unprintable characters (the unprintable codes are not 
				// used by UTF-8). 
				if (escaped > 31 && escaped != 127 && escaped != 58)
				{
					_rclsResult<<(KCHR)escaped;
					p+= 3;
				}
				else
				{
					_rclsResult<<'%';
					escaped = p[1];_rclsResult<<(KCHR)escaped;
					escaped = p[2];_rclsResult<<(KCHR)escaped;
					p+=3;
				}
			}
			else
			{
				_rclsResult<<'%';
				escaped = p[1];_rclsResult<<(KCHR)escaped;
				escaped = p[2];_rclsResult<<(KCHR)escaped;
				p+=3;
			}
		}
		else
		{
			escaped = p[0];
			_rclsResult<<(KCHR)escaped;
			p++;
		}
	}
}
void KString::m_fnEscapeToString(const char * _pszSrc, const char *_pszChangeChr, KString &_rclsResult)
{
	static char hex[] = "0123456789ABCDEF";
	const unsigned char* p = (unsigned char*)_pszSrc;
	unsigned int hi = 0; unsigned int low = 0; unsigned int unCnt = 0;
	std::bitset<256> stdBitSet; stdBitSet.reset();
	while(_pszChangeChr[unCnt] !=0)
	{
		stdBitSet.set((unsigned char)_pszChangeChr[unCnt]);
		unCnt++;
	}
	while (p[0] !=0)
	{
		if (p[0] == '%' && p[2]!=0 && s_arrIsCharHex[p[1]] && s_arrIsCharHex[p[2]])
		{
			_rclsResult<<(KCHR)p[0]<<(KCHR)p[1]<<(KCHR)p[2];
			p+=3;
		}
		else if (stdBitSet[(unsigned char)p[0]])   // Replace Charicter
		{
			hi = (*p & 0xF0)>>4;
			low = (*p & 0x0F);
			_rclsResult<<(KCHR)'%'<<(KCHR)hex[hi]<<(KCHR)hex[low];
			p++;
		}
		else
		{
			_rclsResult<<(KCHR)p[0];
			p++;
		}
	}
}
bool KString::m_fnTokenizeC(char *_pszOrig,const char *_pszTrimChr,TokStrings &_rclsResult)
{
	if(_pszOrig == NULL) return false;
	unsigned int pTrim_Len = KString::m_fnStrLen(_pszTrimChr);
	unsigned int i=0;unsigned int j=0;int prev_st = 0;int next_st = 0;
	bool bmatch = false; unsigned int unOrigLen = KString::m_fnStrLen(_pszOrig);
	for(i = 0;i<unOrigLen;i++)
	{
		for(j = 0;j<pTrim_Len;j++)
		{
			if(_pszOrig[i] == _pszTrimChr[j]){_pszOrig[i] = 0;prev_st = 0;break;}
			else prev_st = 1;
		}
		if(prev_st != next_st)
		{
			if(prev_st == 1)   // Detecting String
			{
				if(i == 0) bmatch = false;
				else bmatch = true;
				_rclsResult+= &_pszOrig[i];
			}
		}
		next_st = prev_st;
	}
	if(bmatch) return true;
	else return false;
}
bool KString::m_fnTokenizeS(char *_pszOrig,const char *_pszTrimStr,TokStrings &_rclsResult)
{
	if(_pszOrig == NULL) return false;
	unsigned int match_idx = 0;int match_temp = -1;int Result_Num = 0;
	unsigned int pTrim_Len = KString::m_fnStrLen(_pszTrimStr);
	unsigned int unOrigLen = KString::m_fnStrLen(_pszOrig);
	if(unOrigLen<= pTrim_Len) return false;
	while(1)
	{
		match_temp = s_fnStrStr2(&_pszOrig[match_idx],(char*)_pszTrimStr);
		if(match_temp  == (-1))
		{
			if((Result_Num) > 0) return true;
			else return false;
		}
		match_idx += match_temp;memset(&_pszOrig[match_idx],0x00,pTrim_Len);
		match_idx+=pTrim_Len;		
		if(match_idx >= unOrigLen) return true;
		if(match_temp == 0)
		{
			if((Result_Num) > 0)
			{
				Result_Num--;_rclsResult.m_listString.m_fnDelTail();
			}
		}
		else if(match_temp > 0)
		{
			if((Result_Num) == 0)
			{
				Result_Num++;_rclsResult+= &_pszOrig[0];
			}
		}
		Result_Num++;_rclsResult+= &_pszOrig[match_idx];
	}
	return true;
}
bool KString::m_fnTokenizeP(char *_pszOrig, const char *_pszPattern,TokStrings &_rclsResult)
{
	if(_pszOrig == NULL) return false;
	int plen = KString::m_fnStrLen(_pszPattern);unsigned int unOrigLen = KString::m_fnStrLen(_pszOrig);
	int p_cnt = 0;int bPrev_P = 3;int bNext_P = 3;char *pTemp = NULL;
	for(unsigned int i=0;i<unOrigLen;i++)
	{
		if(bPrev_P == 1)
		{
			if(_pszOrig[i] != _pszPattern[p_cnt]) bPrev_P = 2;
			else  return false;
		}
		else 
		{
			if(_pszOrig[i] == _pszPattern[p_cnt]){bPrev_P = 1;p_cnt++;_pszOrig[i]=0;}
			else bPrev_P = 2;
		}
		if(bPrev_P != bNext_P)
		{
			if(bPrev_P == 2)
			{
				pTemp = &_pszOrig[i];
				for(unsigned int k=0;((pTemp[k]!=_pszPattern[p_cnt])||(pTemp[k]==0));k++)
				{
					if(pTemp[k] != ' ')
					{
						if(KString::m_fnStrLen(&(pTemp[k]))>0)
						{
							_rclsResult+=&_pszOrig[i+k];
						}
						break;
					}
				}
			}
		}
		bNext_P = bPrev_P;
	}
	if(plen != p_cnt) return false;
	return true;
}
int KString::m_fnRmChr(char* dest,char *source,char* ptrim)
{
	int cnt = 0;unsigned int len = strlen(source);
	for(unsigned int i = 0;i< len;i++)
	{
		chr_jump:
		for(unsigned int j = 0;j<strlen(ptrim);j++)
		{
			if(*source == ptrim[j])
			{
				source++;cnt++;i++;
				goto chr_jump;
			}
		}
		*dest++ = *source++;			
	}
	return cnt;
}
/****************************** String Array Class ******************************************/
StringObj::StringObj(){}
StringObj::~StringObj(){}
KStrings::KStrings(){}
KStrings::~KStrings(){}
KStrings & KStrings::operator+=(const char * _pszV)
{
	if(KString::m_fnStrLen(_pszV)==0) return *this;
	StringObj *pNew = new StringObj;
	pNew->m_clsStringData = _pszV;
	m_listString.m_fnPushBack(pNew);
	return *this;
}
KString & KStrings::operator[](unsigned int _unIndex)
{
	StringObj * pclsStr = (StringObj*)m_listString.m_fnGetIndex(_unIndex);
	if(pclsStr==NULL) return m_clsExept.m_clsStringData;
	return pclsStr->m_clsStringData;
}
unsigned int KStrings::m_fnGetNum(){return m_listString.m_fnGetSize();}
/****************************** Token Parse String Array Class ********************************/
TokString::TokString(){m_pszLine = NULL;}
TokString::~TokString(){}
TokStrings::TokStrings(){}
TokStrings::~TokStrings(){}
TokStrings & TokStrings::operator+=(const char * _pszV)
{
	if(KString::m_fnStrLen(_pszV)==0) return *this;
	TokString *pNew = new TokString;
	pNew->m_pszLine = (char*)_pszV;
	m_listString.m_fnPushBack(pNew);
	return *this;
}
char * TokStrings::operator[](unsigned int _unIndex)
{
	TokString * pclsStr = (TokString*)m_listString.m_fnGetIndex(_unIndex);
	if(pclsStr==NULL) return NULL;
	return pclsStr->m_pszLine;
}
unsigned int TokStrings::m_fnGetNum(){return m_listString.m_fnGetSize();}
/****************************** Compare String Class ***************************************/
CmpString::CmpString(const char * _pszSrc){m_pszString = (char*)_pszSrc;}
CmpString::~CmpString(){}
bool CmpString::operator==(bool _bBool)
{
	if (m_pszString == NULL) { return false; }
	if (strcasecmp(m_pszString, "true") == 0)
	{
		if (_bBool) { return true; }return false;
	}
	else if (strcasecmp(m_pszString, "false") == 0)
	{
		if (_bBool) { return false; }return true;
	}return false;
}
bool CmpString::operator==(char _cVal)
{
	if (m_pszString == NULL) { return false; }
	if (m_pszString[0] == _cVal) { return true; }return false;
}
bool CmpString::operator==(unsigned char _ucVal)
{
	if (m_pszString == NULL) { return false; }
	if ((unsigned char)m_pszString[0] == _ucVal) { return true; }return false;
}
bool CmpString::operator==(short _sVal)
{
	if (m_pszString == NULL) { return false; }
	short temp = (short)atoi(m_pszString); if (temp == _sVal) { return true; }return false;
}
bool CmpString::operator==(unsigned short _usVal)
{
	if (m_pszString == NULL) { return false; }
	unsigned short temp = (unsigned short)atoi(m_pszString);
	if (temp == _usVal) { return true; }return false;
}
bool CmpString::operator==(int _nVal)
{
	if (m_pszString == NULL) { return false; }
	int temp = (int)atoi(m_pszString); if (temp == _nVal) { return true; }return false;
}
bool CmpString::operator==(unsigned int _unVal)
{
	if (m_pszString == NULL) { return false; }
	unsigned int temp = (unsigned int)atoi(m_pszString); if (temp == _unVal) { return true; }return false;
}
bool CmpString::operator==(long _lVal)
{
	if (m_pszString == NULL) { return false; }
	long temp = (long)atol(m_pszString);
	if (temp == _lVal) { return true; }return false;
}
bool CmpString::operator==(unsigned long _ulVal)
{
	if (m_pszString == NULL) { return false; }
	unsigned long temp = (unsigned long)atol(m_pszString);
	if (temp == _ulVal) { return true; }return false;
}
bool CmpString::operator==(char * _szSrc)
{
	if (m_pszString == NULL || _szSrc == NULL) { return false; }
	if (strcmp(m_pszString, (char*)_szSrc) == 0) { return true; }return false;
}
bool CmpString::operator==(const char * _szSrc)
{
	if (m_pszString == NULL || _szSrc == NULL) { return false; }
	if (strcmp(m_pszString, (char*)_szSrc) == 0) { return true; }return false;
}
CmpString::operator KBOOL()
{
	if (m_pszString == NULL) { return false; }
	if (strcasecmp(m_pszString, "true") == 0)
	{
		return true;
	}
	else if (strcasecmp(m_pszString, "false") == 0)
	{
		return false;
	}return false;
}
CmpString::operator KCHR() { if (m_pszString == NULL) { return 0x00; }return (char)m_pszString[0]; }
CmpString::operator KUCHR() { if (m_pszString == NULL) { return 0x00; }return (unsigned char)m_pszString[0]; }
CmpString::operator KSTR() { return m_pszString; }
CmpString::operator KCSTR() { return (const char *)m_pszString; }
CmpString::operator KSHORT() { return (short)KString::m_fnAtoi(m_pszString); }
CmpString::operator KUSHORT() { return (unsigned short)KString::m_fnAtoi(m_pszString); }
CmpString::operator KINT() { return KString::m_fnAtoi(m_pszString); }
CmpString::operator KUINT() { return (unsigned int)KString::m_fnAtoi(m_pszString); }
CmpString::operator KLONG() { return KString::m_fnAtol(m_pszString); }
CmpString::operator KULONG() { return (unsigned long)KString::m_fnAtol(m_pszString); }
}


