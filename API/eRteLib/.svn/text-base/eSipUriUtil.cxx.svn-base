#include <string.h>

//ref.http://en.wikipedia.org/wiki/List_of_country_calling_codes
static const int g_nNationNumber=(22*10);
static const int g_arrNationPhoneNumber[]={
1   , 1340, 1670, 1671, 1684, 1787, 1939, 1441, 1242, 1246,
1264, 1268, 1284, 1345, 1473, 1649, 1664, 1758, 1767, 1784,
1809, 1829, 1868, 1869, 1876, 20  , 211 , 212 , 213 , 216 , 
218 , 220 , 221 , 222 , 223 , 224 , 225 , 226 , 227 , 228 ,
229 , 230 , 231 , 232 , 233 , 234 , 235 , 236 , 237 , 238 , 
239 , 240 , 241 , 242 , 243 , 244 , 245 , 246 , 247 , 248 ,
249 , 250 , 251 , 252 , 253 , 254 , 255 , 256 , 257 , 258 ,
260 , 261 , 262 , 263 , 264 , 265 , 266 , 267 , 268 , 269 ,
27  , 290 , 291 , 297 , 298 , 299 , 30  , 31  , 32  , 33  ,
34  , 350 , 351 , 352 , 353 , 354 , 355 , 356 , 357 , 358 ,
359 , 36  , 370 , 371 , 372 , 373 , 374 , 375 , 376 , 377 ,
378 , 380 , 381 , 382 , 383 , 385 , 386 , 387 , 389 , 39  ,
40  , 41  , 420 , 421 , 423 , 43  , 44  , 45  , 46  , 47  ,
48  , 49  , 500 , 501 , 502 , 503 , 504 , 505 , 506 , 507 ,
508 , 509 , 51  , 52  , 53  , 54  , 55  , 56  , 57  , 58  ,
590 , 591 , 592 , 593 , 594 , 595 , 596 , 597 , 598 , 599 ,
60  , 61  , 62  , 63  , 64  , 65  , 66  , 670 , 672 , 673 ,
674 , 675 , 676 , 677 , 678 , 679 , 680 , 681 , 682 , 683 ,
685 , 686 , 687 , 688 , 689 , 690 , 691 , 692 , 7   , 81  ,
82  , 84  , 850 , 852 , 853 , 855 , 856 , 86  , 880 , 886 ,
90  , 91  , 92  , 93  , 94  , 95  , 960 , 961 , 962 , 963 ,
964 , 965 , 966 , 967 , 968 , 970 , 971 , 972 , 973 , 974 ,
975 , 976 , 977 , 98  , 992 , 993 , 994 , 995 , 996 , 998 
};
static const int ESIP_MAXNUMBER_PHONE=40;

char* GetMINFromURI(const char* _pUsrName, char* _pOutNumber, const char* _pPhoneCxtValue=NULL);
static char* ExtractOnlySipNumber(const char* _pNumber, char* _pOutNumber, bool& _bStartedPlus);
static bool IsPhoneNumberString(const char* _pNumber);

#include <stdio.h>
//the length of _pOutNumber   must be >= 40
char* GetMINFromURI(const char* _pUsrName, char* _pOutNumber, const char* _pPhoneCxtValue)
{
   if( _pUsrName == NULL || _pOutNumber == NULL ) return _pOutNumber;
   _pOutNumber[0]=0x00;

   char szBuf[256];szBuf[0]=0x00;
   char szBuf2[256];szBuf2[0]=0x00;
   //if phone context isn't null, local number string
   if( _pPhoneCxtValue != NULL && _pPhoneCxtValue[0]!=0x00){
      if( IsPhoneNumberString(_pPhoneCxtValue) ){
         strncpy(szBuf2,_pPhoneCxtValue,ESIP_MAXNUMBER_PHONE-1);
      }
   }
   bool bStartedPlus=false;
   strncpy(szBuf2+strlen(szBuf2),_pUsrName,ESIP_MAXNUMBER_PHONE-1);
   ExtractOnlySipNumber(szBuf2,szBuf,bStartedPlus);
   //fail
   if( szBuf[0] == 0x00 ) return _pOutNumber;

   //true
   int nLen=strlen(szBuf);
   if( nLen >= 3 && 
       strncmp(szBuf,"82",2) == 0 ){
      if( nLen == 5 ){
         strncpy(_pOutNumber,szBuf+2,ESIP_MAXNUMBER_PHONE-1);
      }else{
         if( szBuf[2] >= '0' && szBuf[2] <= '9'){
            _pOutNumber[0]='0'; //input zero 
            strncpy(_pOutNumber+1,szBuf+2,ESIP_MAXNUMBER_PHONE-1);
         }else{
            strncpy(_pOutNumber,szBuf+2,ESIP_MAXNUMBER_PHONE-1);
         }
      }
   }else{
      strncpy(_pOutNumber,szBuf,ESIP_MAXNUMBER_PHONE-1);
   }
   return _pOutNumber;
}

static bool IsPhoneNumberString(const char* _pNumber)
{
   int nLen=strlen(_pNumber);
   if( nLen > ESIP_MAXNUMBER_PHONE ) nLen=ESIP_MAXNUMBER_PHONE;
   for( int i=0 ; i < nLen ; i++){
      if( (_pNumber[i] >= '0' && _pNumber[i] <= '9') ||
          ( _pNumber[i] == '+') ||
          ( _pNumber[i] == '-') ||
          ( _pNumber[i] == '(') ||
          ( _pNumber[i] == ')') ||
          ( _pNumber[i] == ' ') ||
          ( _pNumber[i] == '.') ||
          ( _pNumber[i] == '*') ||
          ( _pNumber[i] == '#') ){
         //phone number
      }else{
         if( _pNumber[i] == '%' ){
            if( (i+2) < nLen ){
               //only '%23'
               if( _pNumber[i+1] == '2' &&
                   _pNumber[i+2] == '3'){
                  //phone number
               }else{
                  return false;
               }
            }else{
               return false;
            }
         }else{
            return false;
         }
      }
   }
   return true;
}

//the size of _pOutNumber > 40
static char* ExtractOnlySipNumber(const char* _pNumber, char* _pOutNumber, bool& _bStartedPlus)
{
   if( _pNumber == NULL || _pOutNumber == NULL ) return _pOutNumber;

   _bStartedPlus=false;
   int nLen=strlen(_pNumber);
   if( nLen > ESIP_MAXNUMBER_PHONE ) nLen=ESIP_MAXNUMBER_PHONE;

   //the first clear
   _pOutNumber[0]=0x00;

   //0 ~ 9, * , # (%23)
   char szBuf[ESIP_MAXNUMBER_PHONE+1]; 
   memset(szBuf,0x00,sizeof(szBuf));
   int j=0;
   for( int i=0 ; i < nLen ; i++){
      if( i == 0 && _pNumber[i] == '+' ){
         _bStartedPlus=true;
      }
      if( (_pNumber[i] >= '0' && _pNumber[i] <= '9') ||
          ( _pNumber[i] == '*') ||
          ( _pNumber[i] == '#') ){
         szBuf[j++]=_pNumber[i];
      }else{
         if( _pNumber[i] == '%' ){
            if( (i+2) < nLen ){
               //only '%23'
               if( _pNumber[i+1] == '2' &&
                   _pNumber[i+2] == '3'){
                  szBuf[j++]='#';
                  i+=2;
               }
            }
         }
      }
   }
   strncpy(_pOutNumber,szBuf,ESIP_MAXNUMBER_PHONE-1);
   return _pOutNumber;
}

