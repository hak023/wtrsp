ConfigFile.cxx:	memset(&m_stFileInfo,0x00,sizeof(struct stat));stat((KCSTR)m_clsPath,&m_stFileInfo);
ConfigFile.cxx:		memset(&m_stTm,0x00,sizeof(tm));localtime_r(&m_stFileInfo.st_mtime,&m_stTm);	
ConfigFile.cxx:		memset(m_szTime,0x00,20);
ConfigFile.cxx:	m_pszRawData = new char[unRealSz+10]; memset(m_pszRawData,0x00,unRealSz+10);
ConfigFile.cxx:	memset(m_pszRawData, 0x00, lFileSize+1);
ConfigFile.cxx:	memset(szFileLen,0x00,128);KString::m_fnStrnCat(szFileLen,128,"%lu",lFileSize);
ConfigFile.cxx:	memset(szReadLen,0x00,128);KString::m_fnStrnCat(szReadLen,128,"%lu",lFileSize);
ConfigFile.cxx:	memset(m_szTime,0x00,20);memset(&m_stFileInfo,0x00,sizeof(struct stat));
ConfigFile.cxx:	memset(&m_stTm,0x00,sizeof(tm));
ConfigFile.cxx:		match_idx += match_temp;memset(&_pszOrig[match_idx],0x00,pTrim_Len);
ConfigFile.cxx:				char szTmp[1024];memcpy(szTmp,_pszPath,i+1);szTmp[i+1]=0;
ConfigFile.cxx:	char szTmp[512];memset(szTmp,0x00,512);
Binary file LOAD matches
NodeMgr.cxx:	strncpy(_rstReq.m_szName,(KSTR)m_clsName,NodeMgrLocReq_t::E_NAME_SZ-1);
NodeMgr.cxx:	strncpy(_rstReq.m_szIp,(KSTR)m_clsIP,NodeMgrLocReq_t::E_IP_SZ-1);
NodeMgr.cxx:	strncpy(_rstReq.m_szName,(KSTR)m_clsName,NodeMgrRmtReq_t::E_NAME_SZ-1);
NodeMgr.cxx:	strncpy(_rstReq.m_szIp,(KSTR)m_clsIP,NodeMgrRmtReq_t::E_IP_SZ-1);
NodeMgr.cxx:	strncpy(_rstReq.m_szName,(KSTR)m_clsName,NodeMgrRmtReq_t::E_NAME_SZ-1);
NodeMgr.cxx:				memset(szTime,0x00,20);
NodeMgr.cxx:	strncpy(_rstReq.m_szName,(KSTR)m_clsName,NodeMgrSeqReq_t::E_NAME_SZ-1);
NodeMgr.cxx:	memset(m_szLastConnectedTime,0x00,20);memset(m_szLastDisconnectedTime,0x00,20);
NodeMgr.cxx:			memset(m_szLastConnectedTime,0x00,20);
NodeMgr.cxx:				memset(m_szLastConnectedTime,0x00,20);
NodeMgr.cxx:			memset(m_szLastDisconnectedTime,0x00,20);
NodeMgr.cxx:				memset(pclsCon->m_szLastDisconnectedTime,0x00,20);
NodeMgr.cxx:						strncpy(pclsConnect->m_szLastConnectedTime,(KSTR)pclsFind->m_fnGetVal("CT",&bFound),19);
NodeMgr.cxx:						strncpy(pclsConnect->m_szLastDisconnectedTime,(KSTR)pclsFind->m_fnGetVal("DT",&bFound),19);
NodeMgr.cxx:					strncpy(pclsConnect->m_szLastConnectedTime,(KSTR)pclsFind->m_fnGetParam("CT"),19);
NodeMgr.cxx:					strncpy(pclsConnect->m_szLastDisconnectedTime,(KSTR)pclsFind->m_fnGetParam("DT"),19);
NodeMgr.cxx:			memset(&stAddr,0x00,sizeof(Net5Tuple_t));
NodeMgr.cxx:			memcpy(&stAddr,&pclsCon->m_stAddr,sizeof(Net5Tuple_t));
NodeMgr.cxx:	memcpy(&pclsNew->m_stAddr,&_rstAddr,sizeof(Net5Tuple));
NodeMgr.hxx:		strncpy(m_szLocalIp,_pszLocalIP,E_CONST_MAX_IPADDR_LEN-1);
NodeMgr.hxx:		strncpy(m_szRemoteIp,_pszRemoteIP,E_CONST_MAX_IPADDR_LEN-1);
eRte.cxx:   memset(&cb,0x00,sizeof(ESipRteApiCallBack_t));
eRte.cxx:   char szIP[128];memset(szIP,0x00,sizeof(szIP));
eRte.cxx:   memset(&srseq,0x00,sizeof(srseq));
eRte.cxx:   memset(&rseq,0x00,sizeof(rseq));
eRte.cxx:      memset(&rt,0x00,sizeof(rt));
eRte.cxx:      strcpy(rt.m_szIP,"10.10.10.10");
eRte.cxx:   strcpy(loc.m_szIP,"223.33.173.38");
eRte.cxx:   strcpy(rmt.m_szIP,"10.10.10.10");
eRte.cxx:      memset(&route,0x00,sizeof(route));
eRte.cxx:   strcpy(local.m_szIP,"223.33.173.38");
eRte.cxx:   strcpy(remote.m_szIP,"220.103.220.210");
eRte.cxx:      memset(szCall,0x00,sizeof(szCall));
eRte.cxx:   strcpy(stLocal.m_szIP,"121.134.202.25");
eRte.cxx:   strcpy(stRmt.m_szIP,"50.1.10.194");
eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:      strncpy(stValue.m_szCause[i],gszMainConf[++nCnt],sizeof(stValue.m_szCause[i]));
eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:      strncpy(stValue.m_szCause[i],gszMainConf[++nCnt],sizeof(stValue.m_szCause[i]));
eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   strcpy(stValue.m_szSvrIP,gszMainConf[2]);
eRte.cxx:   strcpy(stValue.m_szTrGWIP,gszMainConf[3]);
eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   strcpy(stValue.m_szSvrIP,gszMainConf[2]);
eRte.cxx:   strcpy(stValue.m_szTrGWIP,gszMainConf[3]);
eRte.cxx:   memset(&stValue,0x00,sizeof(SipSpecialRouteSeq_t));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   memset(&stValue,0x00,sizeof(SipRouteSeq_t));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   memset(&stValue,0x00,sizeof(SipRouteSeq_t));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   memset(&stValue,0x00,sizeof(SipRoute_t));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   //memset(&stValue,0x00,sizeof(stValue));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   memset(&stValue,0x00,sizeof(SipNodeRemote_t));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   strcpy(stValue.m_szDomain,gszMainConf[2]);
eRte.cxx:   strcpy(stValue.m_szIP,gszMainConf[5]);
eRte.cxx:   memset(&stValue,0x00,sizeof(EmergencyCall_t));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   strcpy(stValue.m_szMIN,gszMainConf[2]);
eRte.cxx:   memset(&stValue,0x00,sizeof(SipNodeLocal_t));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   strcpy(stValue.m_szDomain,gszMainConf[2]);
eRte.cxx:   strcpy(stValue.m_szIP,gszMainConf[5]);
eRte.cxx:   memset(&stValue,0x00,sizeof(SipNodeLocal_t));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   strcpy(stValue.m_szDomain,gszMainConf[2]);
eRte.cxx:   strcpy(stValue.m_szIP,gszMainConf[5]);
eRte.cxx:   memset(&stValue,0x00,sizeof(SipNodeLocal_t));
eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
eRte.cxx:   strcpy(stValue.m_szDomain,gszMainConf[2]);
eRte.cxx:   strcpy(stValue.m_szIP,gszMainConf[5]);
eRte.cxx:      strcpy(gszMainConf[nCnt],linebuf);
eRte.cxx:   strcpy(stICLocal.m_szIP,"10.0.99.15");
eRte.cxx:   strcpy(stICRemote.m_szIP,"10.0.99.107");
eRte.cxx:   strncpy(szBuf,g_pstSipRteDir,sizeof(szBuf)-1);
eRte.cxx:   memcpy(st_pFileBuffer2,st_pFileBuffer,nSize);
eRte.cxx:   memset(strBuff, 0x00, sizeof(strBuff));
eRte.cxx:      memset(strKey, 0x00, sizeof(strKey));
eRte.cxx:      memset(strValue, 0x00, sizeof(strValue));
eRte.cxx:         strncpy(strKey,tmpPtr,sizeof(strKey)-1);
eRte.cxx:         strncpy(strValue,tmpPtr,sizeof(strValue)-1);
eRte.cxx:      if (strncasecmp(strKey, "MemTotal:",RHEL_MEMINFO_LEN_TOTAL) == 0) {
eRte.cxx:      }else if (strncasecmp(strKey, "MemFree:",RHEL_MEMINFO_LEN_FREE) == 0) {
eRte.cxx:      }else if (strncasecmp(strKey, "Buffers:",RHEL_MEMINFO_LEN_BUFFERS) == 0) {
eRte.cxx:      }else if (strncasecmp(strKey, "Cached:",RHEL_MEMINFO_LEN_CACHED) == 0) {
eRte.cxx:      }else if (strncasecmp(strKey, "Shmem:",RHEL_MEMINFO_LEN_SHMEM) == 0) {
eSipRte.hxx:      memset(this,0x00,sizeof(SipNodeLocal_t));
eSipRte.hxx:      memset(this,0x00,sizeof(SipNodeRemote_t));
eSipRte.hxx:      memset(this,0x00,sizeof(SipRouteGroup_t));
eSipRte.hxx:      memset(this,0x00,sizeof(SipRoute_t));
eSipRte.hxx:      memset(this,0x00,sizeof(SipRouteSeq_t));
eSipRte.hxx:      memset(this,0x00,sizeof(SipSpecialRouteSeq_t));
eSipRte.hxx:         strcpy(szStatus,"AVAIL");
eSipRte.hxx:            strcpy(szStatus,"M&F_BLK");
eSipRte.hxx:            strcpy(szStatus,"M_BLK");
eSipRte.hxx:            strcpy(szStatus,"F_BLK");
eSipRte.hxx:      memset(this,0x00,sizeof(TrGWRoute_t));
eSipRte.hxx:      memset(this,0x00,sizeof(SipReasonCode_t));
eSipRte.hxx:      memset(this,0x00,sizeof(EmergencyCall_t));
eSipRte.hxx:      memset(this,0x00,sizeof(GlobalOverLoadEnv_t));
eSipRte.hxx:      memset(this,0x00,sizeof(SipCoreTimer_t));
eSipRte.hxx:      memset(this,0x00,sizeof(SipCoreTrace_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:   memset(szSvrIP,0x00,sizeof(szSvrIP));
eSipRteApi.cxx:   memset(szTrGWIP,0x00,sizeof(szTrGWIP));
eSipRteApi.cxx:      if( _szSvrIP != NULL ) strncpy(szSvrIP,_szSvrIP,sizeof(szSvrIP)-1);
eSipRteApi.cxx:      if( _szTrGWIP != NULL ) strncpy(szTrGWIP,_szTrGWIP,sizeof(szTrGWIP)-1);
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:   memset(szSvrIP,0x00,sizeof(szSvrIP));
eSipRteApi.cxx:   memset(szTrGWIP,0x00,sizeof(szTrGWIP));
eSipRteApi.cxx:      if( _szSvrIP != NULL ) strncpy(szSvrIP,_szSvrIP,sizeof(szSvrIP)-1);
eSipRteApi.cxx:      if( _szTrGWIP != NULL ) strncpy(szTrGWIP,_szTrGWIP,sizeof(szTrGWIP)-1);
eSipRteApi.cxx:   memset(szSvrIP,0x00,sizeof(szSvrIP));
eSipRteApi.cxx:   memset(szTrGWIP,0x00,sizeof(szTrGWIP));
eSipRteApi.cxx:      if( _szSvrIP != NULL ) strncpy(szSvrIP,_szSvrIP,sizeof(szSvrIP)-1);
eSipRteApi.cxx:      if( _szTrGWIP != NULL ) strncpy(szTrGWIP,_szTrGWIP,sizeof(szTrGWIP)-1);
eSipRteApi.cxx:   memset(szSvrIP,0x00,sizeof(szSvrIP));
eSipRteApi.cxx:   memset(szTrGWIP,0x00,sizeof(szTrGWIP));
eSipRteApi.cxx:      if( _szSvrIP != NULL ) strncpy(szSvrIP,_szSvrIP,sizeof(szSvrIP)-1);
eSipRteApi.cxx:      if( _szTrGWIP != NULL ) strncpy(szTrGWIP,_szTrGWIP,sizeof(szTrGWIP)-1);
eSipRteApi.cxx:   memset(&stOGRoute,0x00,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:      if( _pstOGRoute != NULL) memcpy(_pstOGRoute,&stOGRoute,sizeof(SipRoute_t));
eSipRteApi.cxx:   memset(&stICRoute,0x00,sizeof(SipRoute_t));
eSipRteApi.cxx:   memset(&stOGRoute,0x00,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:      if( _pstICRoute != NULL) memcpy(_pstICRoute,&stICRoute,sizeof(SipRoute_t));
eSipRteApi.cxx:      if( _pstOGRoute != NULL) memcpy(_pstOGRoute,&stOGRoute,sizeof(SipRoute_t));
eSipRteApi.cxx:   memset(&stOGRoute,0x00,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:      if( _pstOGRoute != NULL) memcpy(_pstOGRoute,&stOGRoute,sizeof(SipRoute_t));
eSipRteApi.cxx:   memset(&stICRoute,0x00,sizeof(SipRoute_t));
eSipRteApi.cxx:   memset(&stOGRoute,0x00,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:      if( _pstICRoute != NULL) memcpy(_pstICRoute,&stICRoute,sizeof(SipRoute_t));
eSipRteApi.cxx:      if( _pstOGRoute != NULL) memcpy(_pstOGRoute,&stOGRoute,sizeof(SipRoute_t));
eSipRteApi.cxx:   memset(&stRoute,0x00,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:      if( _pstRoute != NULL) memcpy(_pstRoute,&stRoute,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:   memset(&stRoute,0x00,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:      if( _pstRoute != NULL) memcpy(_pstRoute,&stRoute,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:   memset(&stRoute,0x00,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:      if( _pstRoute != NULL) memcpy(_pstRoute,&stRoute,sizeof(SipRoute_t));
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:   memset(szError,0x00,sizeof(szError));
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteApi_mmi.cxx:         strcpy(szError,"IllegalParam");
eSipRteDBHandler.cxx:   memset(&action,0x00,sizeof(SipRteDBAction_t));
eSipRteDBHandler.cxx:   memset(&action,0x00,sizeof(SipRteDBAction_t));
eSipRteDBHandler.cxx:   memset(&tDiff,0x00,sizeof(CTimeDiff));
eSipRteDBMgr.cxx:   memset(&m_InterNotify,0x00,sizeof(InternalNotify_t));
eSipRteDBMgr.cxx:      memset(m_pDB,0x00,sizeof(SipRouteManagerDataBase_t));
eSipRteDBMgr.cxx:         memset(m_pDB,0x00,sizeof(SipRouteManagerDataBase_t));
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:      memset(_pstCur->m_nCurRATE,0x00,sizeof(_pstCur->m_nCurRATE));
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:      memset(_pstCur->m_nCurRATE,0x00,sizeof(_pstCur->m_nCurRATE));
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:      memcpy(&stTimer,_pstCur,sizeof(SipCoreTimer_t));
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:   memcpy(_pstCur,_pstNew,nModLen);
eSipRteDBMgr.cxx:         strcmp((pValue+i)->m_szIP,pAdd->m_szIP) == 0 ){
eSipRteDBMgr.cxx:          strcmp((pValue+i)->m_szIP,pAdd->m_szIP) == 0 ){
eSipRteDBMgr.cxx:   memset(nTmpData,0x00,sizeof(nTmpData));
eSipRteDBMgr.cxx:      memcpy(pAdd->m_uiARTE,nTmpData,sizeof(nTmpData));
eSipRteDBMgr.cxx:   memset(nTmpData,0x00,sizeof(nTmpData));
eSipRteDBMgr.cxx:   memset(nTmpRate,0x00,sizeof(nTmpRate));
eSipRteDBMgr.cxx:      memcpy(pAdd->m_uiRSEQ,nTmpData,sizeof(nTmpData));
eSipRteDBMgr.cxx:      memcpy(pAdd->m_nRATE,nTmpRate,sizeof(nTmpRate));
eSipRteDBMgr.cxx:   memset(pAdd->m_nCurRATE,0x00,sizeof(int)*SipSpecialRouteSeq_t::E_MAX_RSEQ);
eSipRteDBMgr.cxx:      if( //strcmp(pAdd->m_szSvrIP,pValue->m_szSvrIP) == 0 &&
eSipRteDBMgr.cxx:      if( strcmp(pAdd->m_szTrGWIP,pValue->m_szTrGWIP) == 0 &&
eSipRteDBMgr.cxx:   memset(szKey,0x00,sizeof(szKey));
eSipRteDBMgr.cxx:   strncpy(szKey,pAdd->m_szMIN,sizeof(pAdd->m_szMIN)-1);
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBLocal.m_stNodeLocal[_nNum]),_pvData,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBRmt.m_stNodeRmt[_nNum]),_pvData,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBRteGroup.m_stRteGroup[_nNum]),_pvData,sizeof(SipRouteGroup_t));
eSipRteDBMgr.cxx:         memcpy(&(m_pDB->m_stDBRte.m_stRte[_nNum]),_pvData,sizeof(SipRoute_t));
eSipRteDBMgr.cxx:         memcpy(&(m_pDB->m_stDBRte.m_stRte[_nNum]),_pvData,sizeof(SipRoute_t));
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBRteSeq.m_stRteSeq[_nNum]),_pvData,sizeof(SipRouteSeq_t));
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBSpecialRteSeq.m_stSpecialRteSeq[_nNum]),_pvData,
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBTrGW.m_stTrGW[_nNum]),_pvData,sizeof(TrGWRoute_t));
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBReason.m_stData[_nNum]),_pvData,sizeof(SipReasonCode_t));
eSipRteDBMgr.cxx:         memcpy(&(m_pDB->m_stDBEnv),_pvData,sizeof(GlobalOverLoadEnv_t));
eSipRteDBMgr.cxx:         memcpy(&(m_pDB->m_stDBEnv),_pvData,sizeof(GlobalOverLoadEnv_t));
eSipRteDBMgr.cxx:         memcpy(&(m_pDB->m_stDBEnv_LB),_pvData,sizeof(GlobalOverLoadEnv_t));
eSipRteDBMgr.cxx:         memcpy(&(m_pDB->m_stDBEnv_LB),_pvData,sizeof(GlobalOverLoadEnv_t));
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBTimer),_pvData,sizeof(SipCoreTimer_t));
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBTrace.m_stData[_nNum]),_pvData,sizeof(SipCoreTrace_t));
eSipRteDBMgr.cxx:      memcpy(&(m_pDB->m_stDBEmer.m_stData[_nNum]),_pvData,sizeof(EmergencyCall_t));
eSipRteDBMgr.cxx:   memset(szKeyStr,0x00,sizeof(szKeyStr));
eSipRteDBMgr.cxx:      strncpy(szKeyStr,pCall->m_szMIN,sizeof(pCall->m_szMIN)-1);
eSipRteDBMgr.cxx:      memset(m_pDB->m_stDBSpecialRteSeq.m_stSpecialRteSeq[_nNum].m_nCurRATE,
eSipRteDBMgr.cxx:      memset(szKeyStr,0x00,sizeof(szKeyStr));
eSipRteDBMgr.cxx:         strncpy(szKeyStr,pCall->m_szMIN,sizeof(pCall->m_szMIN)-1);
eSipRteDBMgr.cxx:   //memcpy(&stNotiTrGW,_pstTrGW,sizeof(TrGWRoute_t));
eSipRteDBMgr.cxx:   memcpy(&stNotiTrGW,_pstTrGW,sizeof(TrGWRoute_t));
eSipRteDBMgr.cxx:   memset(szReason,0x00,sizeof(szReason));
eSipRteDBMgr.cxx:         strcpy(szReason,"M&F_BLK(Disconnected CM-EMP)");
eSipRteDBMgr.cxx:         strcpy(szReason,"M_BLK");
eSipRteDBMgr.cxx:         strcpy(szReason,"F_BLK(Disconnected CM-EMP)");
eSipRteDBMgr.cxx:   memset(&stRoute,0x00,sizeof(SipRoute_t));
eSipRteDBMgr.cxx:   memset(&stLocal,0x00,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:   memset(&stRemote,0x00,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:      memcpy(&stRoute,_pstRoute,sizeof(SipRoute_t));
eSipRteDBMgr.cxx:      memcpy(&stLocal,pvLocal,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:      memcpy(&stRemote,pvRemote,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:   memset(szReason,0x00,sizeof(szReason));
eSipRteDBMgr.cxx:         strcpy(szReason,"SET DEACT");
eSipRteDBMgr.cxx:         strcpy(szReason,"OPTIONS REQ-RES TIMEOUT");
eSipRteDBMgr.cxx:            memcpy(((SipNodeRemote_t*)_pvOut)->m_szNATIP,pValue->m_szNATIP,
eSipRteDBMgr.cxx:      memcpy(_pstOut,&m_pDB->m_stDBTrGW.m_stTrGW[nCurPos],sizeof(TrGWRoute_t));
eSipRteDBMgr.cxx:      if( //strcmp(szSvrIP,pValue->m_szSvrIP) == 0 &&
eSipRteDBMgr.cxx:          //strcmp(szTrGWIP,(pValue)->m_szTrGWIP) == 0 &&
eSipRteDBMgr.cxx:            memset(pValue->m_szSvrIP,0x00,sizeof(pValue->m_szSvrIP));
eSipRteDBMgr.cxx:            strncpy(pValue->m_szSvrIP,szSvrIP,sizeof(pValue->m_szSvrIP)-1);
eSipRteDBMgr.cxx:               memset(pValue->m_szTrGWIP,0x00,sizeof(pValue->m_szTrGWIP));
eSipRteDBMgr.cxx:               strncpy(pValue->m_szTrGWIP,szTrGWIP,sizeof(pValue->m_szTrGWIP)-1);
eSipRteDBMgr.cxx:                       strncmp(pValue->m_szTrGWIP,szTrGWIP,sizeof(pValue->m_szTrGWIP)-1) != 0 ){
eSipRteDBMgr.cxx:               memset(pValue->m_szTrGWIP,0x00,sizeof(pValue->m_szTrGWIP));
eSipRteDBMgr.cxx:               strncpy(pValue->m_szTrGWIP,szTrGWIP,sizeof(pValue->m_szTrGWIP)-1);
eSipRteDBMgr.cxx:      memcpy(_pstICLocal,pvValue,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:      memcpy(_pstICRemote,pvValue,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:   memset(szKey,0x00,sizeof(szKey)); 
eSipRteDBMgr.cxx:         strncpy(szKey,szMIN,sizeof(szKey)-1); 
eSipRteDBMgr.cxx:   memcpy(pstSRSeq,pvValue,sizeof(SipSpecialRouteSeq_t));
eSipRteDBMgr.cxx:      memset(pstSRSeq->m_nCurRATE,0x00,sizeof(int)*SipSpecialRouteSeq_t::E_MAX_RSEQ);
eSipRteDBMgr.cxx:      memset(pstSRSeq->m_nCurRATE,0x00,sizeof(int)*SipSpecialRouteSeq_t::E_MAX_RSEQ);
eSipRteDBMgr.cxx:      memcpy(pCur->m_nCurRATE,pstSRSeq->m_nCurRATE,sizeof(pstSRSeq->m_nCurRATE));
eSipRteDBMgr.cxx:   memcpy(pstSRSeq,pvValue,sizeof(SipSpecialRouteSeq_t));
eSipRteDBMgr.cxx:      memset(pstSRSeq->m_nCurRATE,0x00,sizeof(int)*SipSpecialRouteSeq_t::E_MAX_RSEQ);
eSipRteDBMgr.cxx:      memset(pstSRSeq->m_nCurRATE,0x00,sizeof(int)*SipSpecialRouteSeq_t::E_MAX_RSEQ);
eSipRteDBMgr.cxx:      memcpy(pCur->m_nCurRATE,pstSRSeq->m_nCurRATE,sizeof(pstSRSeq->m_nCurRATE));
eSipRteDBMgr.cxx:   memcpy(_pstICLocal,pvValue,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:   memcpy(_pstICRemote,pvValue,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:   memcpy(_pstICRoute,pvValue,sizeof(SipRoute_t));
eSipRteDBMgr.cxx:   memcpy(_pstICLocal,pvValue,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:   memcpy(_pstICRemote,pvValue,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:   memcpy(_pstICRoute,pvValue,sizeof(SipRoute_t));
eSipRteDBMgr.cxx:   memcpy(_pstOGRoute,pvValue,sizeof(SipRoute_t));
eSipRteDBMgr.cxx:   memcpy(_pstOGLocal,pvValue,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:   memcpy(_pstOGRemote,pvValue,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:      memcpy(_pLocal,pvLocal,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:      memcpy(_pRemote,pvRemote,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:      memcpy(_pRoute,pRte,sizeof(SipRoute_t));
eSipRteDBMgr.cxx:   memset(szReason,0x00,sizeof(szReason));
eSipRteDBMgr.cxx:   memset(_pDBRemote->m_szNATIP,0x00,sizeof(_pDBRemote->m_szNATIP));
eSipRteDBMgr.cxx:   strncpy(_pDBRemote->m_szNATIP,_pRemote->m_szNATIP,sizeof(_pDBRemote->m_szNATIP)-1);
eSipRteDBMgr.cxx:      memcpy(_pLocal,pvLocal,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:      memcpy(_pRemote,pvRemote,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:      memcpy(_pLocal,pvLocal,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:      memcpy(_pRemote,pvRemote,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(SipRouteGroup_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(SipRoute_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(SipRouteSeq_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(SipSpecialRouteSeq_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(TrGWRoute_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(SipReasonCode_t));
eSipRteDBMgr.cxx:         memset(pvRecord,0x00,sizeof(GlobalOverLoadEnv_t));
eSipRteDBMgr.cxx:         memset(pvRecord,0x00,sizeof(SipCoreTimer_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(SipCoreTrace_t));
eSipRteDBMgr.cxx:            memset((pValue+i),0x00,sizeof(EmergencyCall_t));
eSipRteDBMgr.cxx:   memset(tmpCaller,0x00,sizeof(tmpCaller));
eSipRteDBMgr.cxx:   memset(tmpCallee,0x00,sizeof(tmpCallee));
eSipRteDBMgr.cxx:      strncpy(tmpCaller,_pszCaller,sizeof(tmpCaller)-1);
eSipRteDBMgr.cxx:      strncpy(tmpCallee,_pszCallee,sizeof(tmpCallee)-1);
eSipRteDBMgr.cxx:         //if( strncmp(_pszCaller,pTrace->m_szMIN,nMIN) == 0 ){
eSipRteDBMgr.cxx:         //if( strncmp(_pszCallee,pTrace->m_szMIN,nMIN) == 0 ){
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - local node\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - remote node\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - route group\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - route\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - route seq\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - special route seq\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - trgw\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - reason code\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - environment\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - environment_lb\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - timer\n");
eSipRteDBMgr.cxx:      strcpy(szBuf,"#db - emergency call list\n");
eSipRteDBMgr.cxx:      memset(szBuf,0x00,sizeof(szBuf));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(SipNodeLocal_t));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(SipNodeRemote_t));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(SipRouteGroup_t));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(SipRoute_t));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(SipRouteSeq_t));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(SipSpecialRouteSeq_t));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(TrGWRoute_t));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(SipReasonCode_t));
eSipRteDBMgr.cxx:         memcpy(_pvData,pvRecord,sizeof(GlobalOverLoadEnv_t));
eSipRteDBMgr.cxx:         memcpy(_pvData,pvRecord,sizeof(GlobalOverLoadEnv_t));
eSipRteDBMgr.cxx:         memcpy(_pvData,pvRecord,sizeof(SipCoreTimer_t));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(SipCoreTrace_t));
eSipRteDBMgr.cxx:         memcpy(pOut+nCnt,(pValue+i),sizeof(EmergencyCall_t));
eSipRteData.cxx:   memset(m_pRecord,0x00,sizeof(CSipRteUtil::CSipRteUtilValue_t) * E_MAXCNT_RECORD);
eSipRteData.cxx:   memset(tmpBuf,0x00,sizeof(tmpBuf));
eSipRteData.cxx:   strncpy(tmpBuf,_pName,sizeof(tmpBuf)-1);
eSipRteData.cxx:         memset(linebuf,0x00,sizeof(linebuf));
eSipRteData.cxx:            strncpy(tmpBuf,linebuf,sizeof(tmpBuf)-1);
eSipRteData.cxx:   strncpy(m_szFile,tmpBuf,sizeof(m_szFile)-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(SipNodeLocal_t));
eSipRteData.cxx:         strncpy(_pstValue->m_szDesc,pTmpData,sizeof(_pstValue->m_szDesc)-1);
eSipRteData.cxx:         strncpy(_pstValue->m_szDomain,pTmpData,sizeof(_pstValue->m_szDomain)-1);
eSipRteData.cxx:         strncpy(_pstValue->m_szIP,pTmpData,sizeof(_pstValue->m_szIP)-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(SipNodeRemote_t));
eSipRteData.cxx:         strncpy(_pstValue->m_szDesc,pTmpData,sizeof(_pstValue->m_szDesc)-1);
eSipRteData.cxx:         strncpy(_pstValue->m_szDomain,pTmpData,sizeof(_pstValue->m_szDomain)-1);
eSipRteData.cxx:         strncpy(_pstValue->m_szIP,pTmpData,sizeof(_pstValue->m_szIP)-1);
eSipRteData.cxx:         strncpy(_pstValue->m_szNATIP,pTmpData,sizeof(_pstValue->m_szNATIP)-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(SipRouteGroup_t));
eSipRteData.cxx:         strncpy(_pstValue->m_szDesc,pTmpData,sizeof(_pstValue->m_szDesc)-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(SipRoute_t));
eSipRteData.cxx:         strncpy(_pstValue->m_szDesc,pTmpData,sizeof(_pstValue->m_szDesc)-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(SipRouteSeq_t));
eSipRteData.cxx:         strncpy(_pstValue->m_szDesc,pTmpData,sizeof(_pstValue->m_szDesc)-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(SipSpecialRouteSeq_t));
eSipRteData.cxx:         strncpy(_pstValue->m_szDesc,pTmpData,sizeof(_pstValue->m_szDesc)-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(TrGWRoute_t));
eSipRteData.cxx:         strncpy(_pstValue->m_szDesc,pTmpData,sizeof(_pstValue->m_szDesc)-1);
eSipRteData.cxx:         strncpy(_pstValue->m_szSvrIP,pTmpData,sizeof(_pstValue->m_szSvrIP)-1);
eSipRteData.cxx:         strncpy(_pstValue->m_szTrGWIP,pTmpData,sizeof(_pstValue->m_szTrGWIP)-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(SipReasonCode_t));
eSipRteData.cxx:         strncpy(_pstValue->m_szDesc,pTmpData,sizeof(_pstValue->m_szDesc)-1);
eSipRteData.cxx:               strncpy(_pstValue->m_szCause[j],pTmpData,sizeof(_pstValue->m_szCause[j])-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(GlobalOverLoadEnv_t));
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(EmergencyCall_t));
eSipRteData.cxx:         strncpy(_pstValue->m_szDesc,pTmpData,sizeof(_pstValue->m_szDesc)-1);
eSipRteData.cxx:         strncpy(_pstValue->m_szMIN,pTmpData,sizeof(_pstValue->m_szMIN)-1);
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(SipCoreTimer_t));
eSipRteData.cxx:   memset(_pstValue,0x00,sizeof(SipCoreTrace_t));
eSipRteData.cxx:         if( strcmp(pairName[0],pstSipRteTraceKey[j]) == 0 ){
eSipRteData.cxx:        strncpy(_pstValue->m_szMIN,pairName[1],sizeof(_pstValue->m_szMIN));
eSipRteData.cxx:       strcmp(_pstNew->m_szDesc,_pstCur->m_szDesc) != 0){
eSipRteData.cxx:      strncpy(_pstCur->m_szDesc,_pstNew->m_szDesc,sizeof(_pstCur->m_szDesc) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szDomain,_pstCur->m_szDomain) != 0){
eSipRteData.cxx:      strncpy(_pstCur->m_szDomain,_pstNew->m_szDomain,sizeof(_pstCur->m_szDomain) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szIP,_pstCur->m_szIP) != 0 ){
eSipRteData.cxx:       strcmp(_pstNew->m_szDesc,_pstCur->m_szDesc) != 0){
eSipRteData.cxx:      strncpy(_pstCur->m_szDesc,_pstNew->m_szDesc,sizeof(_pstCur->m_szDesc) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szDomain,_pstCur->m_szDomain) != 0){
eSipRteData.cxx:      strncpy(_pstCur->m_szDomain,_pstNew->m_szDomain,sizeof(_pstCur->m_szDomain) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szIP,_pstCur->m_szIP) != 0 ){
eSipRteData.cxx:       strcmp(_pstNew->m_szDesc,_pstCur->m_szDesc) != 0 ){
eSipRteData.cxx:      strncpy(_pstCur->m_szDesc,_pstNew->m_szDesc,sizeof(_pstCur->m_szDesc) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szDesc,_pstCur->m_szDesc) != 0 ){
eSipRteData.cxx:      strncpy(_pstCur->m_szDesc,_pstNew->m_szDesc,sizeof(_pstCur->m_szDesc) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szDesc,_pstCur->m_szDesc) != 0){
eSipRteData.cxx:      strncpy(_pstCur->m_szDesc,_pstNew->m_szDesc,sizeof(_pstCur->m_szDesc) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szDesc,_pstCur->m_szDesc) != 0){
eSipRteData.cxx:      strncpy(_pstCur->m_szDesc,_pstNew->m_szDesc,sizeof(_pstCur->m_szDesc) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szDesc,_pstCur->m_szDesc) != 0){
eSipRteData.cxx:      strncpy(_pstCur->m_szDesc,_pstNew->m_szDesc,sizeof(_pstCur->m_szDesc) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szSvrIP,_pstCur->m_szSvrIP) != 0 ){
eSipRteData.cxx:       strcmp(_pstNew->m_szTrGWIP,_pstCur->m_szTrGWIP) != 0 ){
eSipRteData.cxx:       strcmp(_pstNew->m_szDesc,_pstCur->m_szDesc) != 0){
eSipRteData.cxx:      strncpy(_pstCur->m_szDesc,_pstNew->m_szDesc,sizeof(_pstCur->m_szDesc) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szMIN,_pstCur->m_szMIN) != 0){
eSipRteData.cxx:      //strncpy(_pstCur->m_szMIN,_pstNew->m_szMIN,sizeof(_pstCur->m_szMIN) -1);
eSipRteData.cxx:       strcmp(_pstNew->m_szDesc,_pstCur->m_szDesc) != 0){
eSipRteData.cxx:      strncpy(_pstCur->m_szDesc,_pstNew->m_szDesc,sizeof(_pstCur->m_szDesc) -1);
eSipRteData.cxx:         strcmp(_pstNew->m_szCause[i],_pstCur->m_szCause[i]) != 0){
eSipRteData.cxx:         strncpy(_pstCur->m_szCause[i],_pstNew->m_szCause[i],sizeof(_pstCur->m_szCause[i]) -1);
eSipRteLoad.hxx:         memset(m_pLoad->unarrPeriodSumIn, 0, sizeof(unsigned int) * E_MAX_PERIOD_SIZE);
eSipRteLoad.hxx:         memset(m_pLoad->unarrPeriodSumOut, 0, sizeof(unsigned int) * E_MAX_PERIOD_SIZE);
eSipRteLoad.hxx:      memset(m_pLoad->unarrPeriodSumIn, 0, sizeof(unsigned int) * E_MAX_PERIOD_SIZE);
eSipRteLoad.hxx:      memset(m_pLoad->unarrPeriodSumOut, 0, sizeof(unsigned int) * E_MAX_PERIOD_SIZE);
eSipRteMgr.cxx:   memset(m_pCB,0x00,sizeof(ESipRteApiCallBack_t));
eSipRteMgr.cxx:   memcpy(m_pCB,_pstCB,sizeof(ESipRteApiCallBack_t));
eSipRteMgr.cxx:      memcpy(m_pCB,_pstCB,sizeof(ESipRteApiCallBack_t));
eSipRteMgr.cxx:   memset(szError,0x00,sizeof(szError));
eSipRteMgr.cxx:         if( _nIndex == CSipRteData::E_SIPRTE_LN ) memcpy(_pvData,pvRecord,sizeof(SipNodeLocal_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_RMT ) memcpy(_pvData,pvRecord,sizeof(SipNodeRemote_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_GRTE ) memcpy(_pvData,pvRecord,sizeof(SipRouteGroup_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_RTE ) memcpy(_pvData,pvRecord,sizeof(SipRoute_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_RSEQ ) memcpy(_pvData,pvRecord,sizeof(SipRouteSeq_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_SSEQ ) memcpy(_pvData,pvRecord,sizeof(SipSpecialRouteSeq_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_TRGW ) memcpy(_pvData,pvRecord,sizeof(TrGWRoute_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_RSN ) memcpy(_pvData,pvRecord,sizeof(SipReasonCode_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_ENV) memcpy(_pvData,pvRecord,sizeof(GlobalOverLoadEnv_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_ENV_LB) memcpy(_pvData,pvRecord,sizeof(GlobalOverLoadEnv_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_TIME ) memcpy(_pvData,pvRecord,sizeof(SipCoreTimer_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_TRC ) memcpy(_pvData,pvRecord,sizeof(SipCoreTrace_t));
eSipRteMgr.cxx:         else if( _nIndex == CSipRteData::E_SIPRTE_EMER ) memcpy(_pvData,pvRecord,sizeof(EmergencyCall_t));
eSipRteMgr.cxx:         memcpy(&stLocal,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stRemote,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stRouteGroup,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stRoute,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stRouteSeq,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stSpecialRouteSeq,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stTrGW,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stReason,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stEnv,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stTimer,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stTrace,pvRecord,nLen);
eSipRteMgr.cxx:         memcpy(&stEmer,pvRecord,nLen);
eSipRteMgr.cxx:           memcpy(&stTimer,pvRecord,sizeof(SipCoreTimer_t));
eSipRteMgr.cxx:      strncpy(_pCauseText,pReason->m_szCause[_nCauseIndex],
eSipRteQueue.hxx:       memcpy (m_QueueObjects[nTmpPos], object, nLength);
eSipRteQueue.hxx:       memcpy (m_QueueObjects[nTmpPos], object, sizeof(ARGTYPE));
eSipRteQueue.hxx:    memcpy((T)obj,m_QueueObjects[nTmpPos],sizeof(ARGTYPE));
eSipRteQueue.hxx:    memset(m_QueueObjects[nTmpPos],0x00,sizeof(ARGTYPE));
eSipRteQueue.hxx:      memcpy ((T)obj,m_QueueObjects[nTmpPos], sizeof(ARGTYPE));
eSipRteStatus.cxx:   memset(m_szFile,0x00,sizeof(m_szFile));
eSipRteStatus.cxx:   memset(m_szFileBak,0x00,sizeof(m_szFile));
eSipRteStatus.cxx:   strcpy(szBuf,"#db - route\n");
eSipRteStatus.cxx:      memset(szBuf,0x00,sizeof(szBuf));
eSipRteThread.cxx:   memset(m_pOpt, 0x00, sizeof(SipOptMgr_t)*SipRouteDataBase_t::E_MAXNUM);
eSipRteThread.cxx:         memcpy(&stRoute,(pRte+i),sizeof(stRoute));
eSipRteThread.cxx:         memcpy(&stLocal,pvLocalRecord,sizeof(stLocal));
eSipRteThread.cxx:         memcpy(&stRemote,pvRmtRecord,sizeof(stRemote));
eSipRteThread.cxx:         memcpy(&stRoute,(pRte+i),sizeof(stRoute));
eSipRteThread.cxx:         memcpy(&stLocal,pvLocalRecord,sizeof(stLocal));
eSipRteThread.cxx:         memcpy(&stRemote,pvRmtRecord,sizeof(stRemote));
eSipRteUsrMap.hxx:            memcpy(&value,&(it->second),sizeof(T_VALUE));
eSipRteUtil.cxx:   strncpy(szBuf,_pszPath,sizeof(szBuf)-1);
eSipRteUtil.cxx:   memset(tmpBuf,0x00,sizeof(tmpBuf));
eSipRteUtil.cxx:	strncpy(tmpBuf,str,sizeof(tmpBuf)-1);
eSipRteUtil.cxx:  memcpy(str,tmpBuf+trimCnt,strlen(tmpBuf+trimCnt));
eSipRteUtil.cxx:   memset(tmpStr,0x00,sizeof(tmpStr));
eSipRteUtil.cxx:   strncpy(tmpStr,str,sizeof(tmpStr));
eSipRteUtil.cxx:   strncpy(pOut[outCnt],tmpPtr,sizeof(pOut[outCnt])-1);
eSipRteUtil.cxx:            strncpy(pOut[outCnt],miscPtr[0],sizeof(pOut[outCnt])-1);
eSipRteUtil.cxx:         strncpy(pOut[outCnt],tmpPtr,sizeof(pOut[outCnt])-1);
eSipRteUtil.cxx: memset(tmpStr,0x00,sizeof(tmpStr));
eSipRteUtil.cxx: strncpy(tmpStr,str,sizeof(tmpStr));
eSipRteUtil.cxx: strncpy(pOut[outCnt],tmpPtr,sizeof(pOut[outCnt])-1);
eSipRteUtil.cxx:			strncpy(pOut[outCnt],tmpPtr,sizeof(pOut[outCnt])-1);
eSipRteUtil.cxx:   if (strncasecmp(pszHex, "0x", 2) == 0) {
eSipRteUtil.cxx:   strncpy(szbuf,_prStr,sizeof(szbuf)-2);
eSipRteUtil.cxx:      memcpy(_prStr,szbuf+nCnt,nLen-nCnt);
eSipRteUtil.cxx:            memcpy((_pstData+_rCnt)->m_szData,(_pStr+nStart),nCopyLen);
eSipRteUtil.cxx:         memcpy((_pstData+_rCnt)->m_szData,(_pStr+nStart),nCopyLen);
eSipRteUtil.cxx:   memset(strBuff, 0x00, sizeof(strBuff));
eSipRteUtil.cxx:      memset(strKey, 0x00, sizeof(strKey));
eSipRteUtil.cxx:      memset(strValue, 0x00, sizeof(strValue));
eSipRteUtil.cxx:         strncpy(strKey,tmpPtr,sizeof(strKey)-1);
eSipRteUtil.cxx:         strncpy(strValue,tmpPtr,sizeof(strValue)-1);
eSipRteUtil.cxx:      if (strncasecmp(strKey, "MemTotal:",RHEL_MEMINFO_LEN_TOTAL) == 0) {
eSipRteUtil.cxx:      }else if (strncasecmp(strKey, "MemFree:",RHEL_MEMINFO_LEN_FREE) == 0) {
eSipRteUtil.cxx:      }else if (strncasecmp(strKey, "Buffers:",RHEL_MEMINFO_LEN_BUFFERS) == 0) {
eSipRteUtil.cxx:      }else if (strncasecmp(strKey, "Cached:",RHEL_MEMINFO_LEN_CACHED) == 0) {
eSipRteUtil.cxx:      }else if (strncasecmp(strKey, "Shmem:",RHEL_MEMINFO_LEN_SHMEM) == 0) {
eSipUriUtil.cxx:         strncpy(szBuf2,_pPhoneCxtValue,ESIP_MAXNUMBER_PHONE-1);
eSipUriUtil.cxx:   strncpy(szBuf2+strlen(szBuf2),_pUsrName,ESIP_MAXNUMBER_PHONE-1);
eSipUriUtil.cxx:       strncmp(szBuf,"82",2) == 0 ){
eSipUriUtil.cxx:         strncpy(_pOutNumber,szBuf+2,ESIP_MAXNUMBER_PHONE-1);
eSipUriUtil.cxx:            strncpy(_pOutNumber+1,szBuf+2,ESIP_MAXNUMBER_PHONE-1);
eSipUriUtil.cxx:            strncpy(_pOutNumber,szBuf+2,ESIP_MAXNUMBER_PHONE-1);
eSipUriUtil.cxx:      strncpy(_pOutNumber,szBuf,ESIP_MAXNUMBER_PHONE-1);
eSipUriUtil.cxx:   memset(szBuf,0x00,sizeof(szBuf));
eSipUriUtil.cxx:   strncpy(_pOutNumber,szBuf,ESIP_MAXNUMBER_PHONE-1);
main.cpp:         memset(pBuf,0x00,MKSIZE);
org_eRte.cxx:   memset(&cb,0x00,sizeof(ESipRteApiCallBack_t));
org_eRte.cxx:   char szIP[128];memset(szIP,0x00,sizeof(szIP));
org_eRte.cxx:   memset(&srseq,0x00,sizeof(srseq));
org_eRte.cxx:   memset(&rseq,0x00,sizeof(rseq));
org_eRte.cxx:      memset(&rt,0x00,sizeof(rt));
org_eRte.cxx:      strcpy(rt.m_szIP,"10.10.10.10");
org_eRte.cxx:   strcpy(loc.m_szIP,"223.33.173.38");
org_eRte.cxx:   strcpy(rmt.m_szIP,"10.10.10.10");
org_eRte.cxx:      memset(&route,0x00,sizeof(route));
org_eRte.cxx:   strcpy(local.m_szIP,"223.33.173.38");
org_eRte.cxx:   strcpy(remote.m_szIP,"220.103.220.210");
org_eRte.cxx:      memset(szCall,0x00,sizeof(szCall));
org_eRte.cxx:   strcpy(stLocal.m_szIP,"121.134.202.25");
org_eRte.cxx:   strcpy(stRmt.m_szIP,"50.1.10.194");
org_eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
org_eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
org_eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:      strncpy(stValue.m_szCause[i],gszMainConf[++nCnt],sizeof(stValue.m_szCause[i]));
org_eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:      strncpy(stValue.m_szCause[i],gszMainConf[++nCnt],sizeof(stValue.m_szCause[i]));
org_eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   strcpy(stValue.m_szSvrIP,gszMainConf[2]);
org_eRte.cxx:   strcpy(stValue.m_szTrGWIP,gszMainConf[3]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   strcpy(stValue.m_szSvrIP,gszMainConf[2]);
org_eRte.cxx:   strcpy(stValue.m_szTrGWIP,gszMainConf[3]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(SipSpecialRouteSeq_t));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(stValue));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(SipRouteSeq_t));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(SipRouteSeq_t));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(SipRoute_t));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   //memset(&stValue,0x00,sizeof(stValue));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(SipNodeRemote_t));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   strcpy(stValue.m_szDomain,gszMainConf[2]);
org_eRte.cxx:   strcpy(stValue.m_szIP,gszMainConf[5]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(EmergencyCall_t));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   strcpy(stValue.m_szMIN,gszMainConf[2]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(SipNodeLocal_t));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   strcpy(stValue.m_szDomain,gszMainConf[2]);
org_eRte.cxx:   strcpy(stValue.m_szIP,gszMainConf[5]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(SipNodeLocal_t));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   strcpy(stValue.m_szDomain,gszMainConf[2]);
org_eRte.cxx:   strcpy(stValue.m_szIP,gszMainConf[5]);
org_eRte.cxx:   memset(&stValue,0x00,sizeof(SipNodeLocal_t));
org_eRte.cxx:   strcpy(stValue.m_szDesc,gszMainConf[1]);
org_eRte.cxx:   strcpy(stValue.m_szDomain,gszMainConf[2]);
org_eRte.cxx:   strcpy(stValue.m_szIP,gszMainConf[5]);
org_eRte.cxx:      strcpy(gszMainConf[nCnt],linebuf);
org_eRte.cxx:   strcpy(stICLocal.m_szIP,"10.0.99.15");
org_eRte.cxx:   strcpy(stICRemote.m_szIP,"10.0.99.107");
org_eRte.cxx:   strncpy(szBuf,g_pstSipRteDir,sizeof(szBuf)-1);
org_eRte.cxx:   memset(pstFileBuf,0x00,st_nFileSize);
org_eRte.cxx:   memset(szTmp,0x00,sizeof(szTmp));
org_eRte.cxx:   strncpy(szTmp,miscPtr[0],sizeof(szTmp)-1);
org_eRte.cxx:         memset(szTmp,0x00,sizeof(szTmp));
org_eRte.cxx:         strncpy(szTmp,miscPtr[0],sizeof(szTmp)-1);
